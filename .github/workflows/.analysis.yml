name: Analysis

on:
  workflow_call:

permissions:
  actions: read
  id-token: write # This is required for requesting the JWT
  contents: write # This is required for actions/checkout
  packages: write
  pull-requests: write
  security-events: write # CodeQL

jobs:
  tests:
    name: Tests
    runs-on: ubuntu-24.04
    timeout-minutes: 5
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    strategy:
      matrix:
        dir: [backend, frontend]
        include:
          - dir: backend
            token: SONAR_TOKEN_BACKEND
          - dir: frontend
            token: SONAR_TOKEN_FRONTEND
    steps:
      - uses: bcgov-nr/action-test-and-analyse@v1.2.1
        with:
          commands: |
            npm ci
            npm run test:cov
          dir: ${{ matrix.dir }}
          node_version: "22"
          sonar_args: >
            -Dsonar.exclusions=**/coverage/**,**/node_modules/**,**/*spec.ts
            -Dsonar.organization=bcgov-sonarcloud
            -Dsonar.projectKey=quickstart-openshift_${{ matrix.dir }}
            -Dsonar.sources=src
            -Dsonar.tests.inclusions=**/*spec.ts
            -Dsonar.javascript.lcov.reportPaths=./coverage/lcov.info
          sonar_token: ${{ secrets[matrix.token] }}
          triggers: ('${{ matrix.dir }}/')

  verify-terraform:
    name: Verify Terraform
    uses: ./.github/workflows/.deploy-app.yml
    with:
      app_env: ephermal-${{ github.sha }}
      command: plan
      environment_name: dev
      tag: ${{ github.sha }}
    secrets: inherit

  codeql:
    uses: ./.github/workflows/.codeql.yml

  # https://github.com/marketplace/actions/aqua-security-trivy
  trivy:
    name: Trivy Security Scan
    if: ${{ !github.event.pull_request.draft }}
    runs-on: ubuntu-24.04
    timeout-minutes: 1
    steps:
      - uses: actions/checkout@v4
      - name: Run Trivy vulnerability scanner in repo mode
        uses: aquasecurity/trivy-action@0.29.0
        with:
          format: "sarif"
          output: "trivy-results.sarif"
          ignore-unfixed: true
          scan-type: "fs"
          scanners: "vuln,secret,config"
          severity: "CRITICAL,HIGH"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "trivy-results.sarif"

  pre-commit:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - name: install eslint packages
        run: npm ci
      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - name: set PY
        run: echo "PY=$(python -VV | sha256sum | cut -d' ' -f1)" >> $GITHUB_ENV
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: pre-commit|${{ env.PY }}|${{ hashFiles('.pre-commit-config.yaml') }}
      - uses: pre-commit/action@v3.0.1

  commitlint: # Test all commits in PR follow conventional commit format
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      pull-requests: read
    steps:
      - uses: actions/checkout@v4
      - uses: wagoid/commitlint-github-action@v6
        with:
          configFile: '.commitlintrc.yml'

  results:
    name: Analysis Results
    needs: [tests] # Restore trivy when/if fixed
    if: always()
    runs-on: ubuntu-24.04
    steps:
      - if: contains(needs.*.result, 'failure')
        run: echo "At least one job has failed." && exit 1
      - run: echo "Success!"
