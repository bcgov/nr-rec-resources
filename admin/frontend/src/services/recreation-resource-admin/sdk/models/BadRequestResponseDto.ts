/* tslint:disable */
/* eslint-disable */
/**
 * Recreation Sites and Trails BC Admin API
 * RST Admin API documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ValidationErrorDetailDto } from './ValidationErrorDetailDto';
import {
    ValidationErrorDetailDtoFromJSON,
    ValidationErrorDetailDtoFromJSONTyped,
    ValidationErrorDetailDtoToJSON,
    ValidationErrorDetailDtoToJSONTyped,
} from './ValidationErrorDetailDto';

/**
 * 
 * @export
 * @interface BadRequestResponseDto
 */
export interface BadRequestResponseDto {
    /**
     * The HTTP status code of the error response.
     * @type {number}
     * @memberof BadRequestResponseDto
     */
    statusCode: BadRequestResponseDtoStatusCodeEnum;
    /**
     * A general message describing the error.
     * @type {string}
     * @memberof BadRequestResponseDto
     */
    message: string;
    /**
     * The error type or short description of the HTTP status.
     * @type {string}
     * @memberof BadRequestResponseDto
     */
    error: string;
    /**
     * The timestamp of when the error occurred (ISO 8601 format).
     * @type {string}
     * @memberof BadRequestResponseDto
     */
    timestamp: string;
    /**
     * The request path that caused the error.
     * @type {string}
     * @memberof BadRequestResponseDto
     */
    path: string;
    /**
     * An array of detailed validation errors specific to this bad request.
     * @type {Array<ValidationErrorDetailDto>}
     * @memberof BadRequestResponseDto
     */
    details: Array<ValidationErrorDetailDto>;
}


/**
 * @export
 */
export const BadRequestResponseDtoStatusCodeEnum = {
    NUMBER_400: 400
} as const;
export type BadRequestResponseDtoStatusCodeEnum = typeof BadRequestResponseDtoStatusCodeEnum[keyof typeof BadRequestResponseDtoStatusCodeEnum];


/**
 * Check if a given object implements the BadRequestResponseDto interface.
 */
export function instanceOfBadRequestResponseDto(value: object): value is BadRequestResponseDto {
    if (!('statusCode' in value) || value['statusCode'] === undefined) return false;
    if (!('message' in value) || value['message'] === undefined) return false;
    if (!('error' in value) || value['error'] === undefined) return false;
    if (!('timestamp' in value) || value['timestamp'] === undefined) return false;
    if (!('path' in value) || value['path'] === undefined) return false;
    if (!('details' in value) || value['details'] === undefined) return false;
    return true;
}

export function BadRequestResponseDtoFromJSON(json: any): BadRequestResponseDto {
    return BadRequestResponseDtoFromJSONTyped(json, false);
}

export function BadRequestResponseDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): BadRequestResponseDto {
    if (json == null) {
        return json;
    }
    return {
        
        'statusCode': json['statusCode'],
        'message': json['message'],
        'error': json['error'],
        'timestamp': json['timestamp'],
        'path': json['path'],
        'details': ((json['details'] as Array<any>).map(ValidationErrorDetailDtoFromJSON)),
    };
}

export function BadRequestResponseDtoToJSON(json: any): BadRequestResponseDto {
    return BadRequestResponseDtoToJSONTyped(json, false);
}

export function BadRequestResponseDtoToJSONTyped(value?: BadRequestResponseDto | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'statusCode': value['statusCode'],
        'message': value['message'],
        'error': value['error'],
        'timestamp': value['timestamp'],
        'path': value['path'],
        'details': ((value['details'] as Array<any>).map(ValidationErrorDetailDtoToJSON)),
    };
}

