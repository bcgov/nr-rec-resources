/* tslint:disable */
/* eslint-disable */
/**
 * Recreation Sites and Trails BC Admin API
 * RST Admin API documentation
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type {
  BadRequestResponseDto,
  CreateRecreationResourceDocBodyDto,
  CreateRecreationResourceImageBodyDto,
  EstablishmentOrderDocDto,
  OptionDto,
  RecreationResourceDetailDto,
  RecreationResourceDocDto,
  RecreationResourceImageDto,
  SuggestionsResponseDto,
  UpdateRecreationResourceDto,
} from '../models/index';
import {
  BadRequestResponseDtoFromJSON,
  BadRequestResponseDtoToJSON,
  CreateRecreationResourceDocBodyDtoFromJSON,
  CreateRecreationResourceDocBodyDtoToJSON,
  CreateRecreationResourceImageBodyDtoFromJSON,
  CreateRecreationResourceImageBodyDtoToJSON,
  EstablishmentOrderDocDtoFromJSON,
  EstablishmentOrderDocDtoToJSON,
  OptionDtoFromJSON,
  OptionDtoToJSON,
  RecreationResourceDetailDtoFromJSON,
  RecreationResourceDetailDtoToJSON,
  RecreationResourceDocDtoFromJSON,
  RecreationResourceDocDtoToJSON,
  RecreationResourceImageDtoFromJSON,
  RecreationResourceImageDtoToJSON,
  SuggestionsResponseDtoFromJSON,
  SuggestionsResponseDtoToJSON,
  UpdateRecreationResourceDtoFromJSON,
  UpdateRecreationResourceDtoToJSON,
} from '../models/index';

export interface CreateEstablishmentOrderDocRequest {
  recResourceId: string;
  file: Blob;
  title: string;
}

export interface CreateRecreationresourceDocumentRequest {
  recResourceId: string;
  title: string;
  file: Blob;
}

export interface CreateRecreationresourceImageRequest {
  recResourceId: string;
  caption: string;
  file: Blob;
}

export interface DeleteDocumentResourceRequest {
  recResourceId: string;
  refId: string;
}

export interface DeleteEstablishmentOrderDocRequest {
  recResourceId: string;
  s3Key: string;
}

export interface DeleteImageResourceRequest {
  recResourceId: string;
  refId: string;
}

export interface GetAllEstablishmentOrderDocsRequest {
  recResourceId: string;
}

export interface GetDocumentResourceByIdRequest {
  recResourceId: string;
  refId: string;
}

export interface GetDocumentsByRecResourceIdRequest {
  recResourceId: string;
}

export interface GetImageResourceByIdRequest {
  recResourceId: string;
  refId: string;
}

export interface GetImagesByRecResourceIdRequest {
  recResourceId: string;
}

export interface GetOptionsByTypeRequest {
  type: GetOptionsByTypeTypeEnum;
}

export interface GetRecreationResourceByIdRequest {
  recResourceId: string;
}

export interface GetRecreationResourceSuggestionsRequest {
  searchTerm: string;
}

export interface UpdateDocumentResourceRequest {
  recResourceId: string;
  refId: string;
  createRecreationResourceDocBodyDto: CreateRecreationResourceDocBodyDto;
}

export interface UpdateImageResourceRequest {
  recResourceId: string;
  refId: string;
  createRecreationResourceImageBodyDto: CreateRecreationResourceImageBodyDto;
}

export interface UpdateRecreationResourceByIdRequest {
  recResourceId: string;
  updateRecreationResourceDto: UpdateRecreationResourceDto;
}

/**
 *
 */
export class RecreationResourcesApi extends runtime.BaseAPI {
  /**
   * Uploads a PDF document to S3 and creates a database record
   * Create a new establishment order document
   */
  async createEstablishmentOrderDocRaw(
    requestParameters: CreateEstablishmentOrderDocRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<EstablishmentOrderDocDto>> {
    if (requestParameters['recResourceId'] == null) {
      throw new runtime.RequiredError(
        'recResourceId',
        'Required parameter "recResourceId" was null or undefined when calling createEstablishmentOrderDoc().',
      );
    }

    if (requestParameters['file'] == null) {
      throw new runtime.RequiredError(
        'file',
        'Required parameter "file" was null or undefined when calling createEstablishmentOrderDoc().',
      );
    }

    if (requestParameters['title'] == null) {
      throw new runtime.RequiredError(
        'title',
        'Required parameter "title" was null or undefined when calling createEstablishmentOrderDoc().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('keycloak', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const consumes: runtime.Consume[] = [
      { contentType: 'multipart/form-data' },
    ];
    // @ts-ignore: canConsumeForm may be unused
    const canConsumeForm = runtime.canConsumeForm(consumes);

    let formParams: { append(param: string, value: any): any };
    let useForm = false;
    // use FormData to transmit files using content-type "multipart/form-data"
    useForm = canConsumeForm;
    if (useForm) {
      formParams = new FormData();
    } else {
      formParams = new URLSearchParams();
    }

    if (requestParameters['file'] != null) {
      formParams.append('file', requestParameters['file'] as any);
    }

    if (requestParameters['title'] != null) {
      formParams.append('title', requestParameters['title'] as any);
    }

    let urlPath = `/api/v1/recreation-resources/{rec_resource_id}/establishment-order-docs`;
    urlPath = urlPath.replace(
      `{${'rec_resource_id'}}`,
      encodeURIComponent(String(requestParameters['recResourceId'])),
    );

    const response = await this.request(
      {
        path: urlPath,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: formParams,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      EstablishmentOrderDocDtoFromJSON(jsonValue),
    );
  }

  /**
   * Uploads a PDF document to S3 and creates a database record
   * Create a new establishment order document
   */
  async createEstablishmentOrderDoc(
    requestParameters: CreateEstablishmentOrderDocRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<EstablishmentOrderDocDto> {
    const response = await this.createEstablishmentOrderDocRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Create a new Document Resource with an uploaded file
   */
  async createRecreationresourceDocumentRaw(
    requestParameters: CreateRecreationresourceDocumentRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<RecreationResourceDocDto>> {
    if (requestParameters['recResourceId'] == null) {
      throw new runtime.RequiredError(
        'recResourceId',
        'Required parameter "recResourceId" was null or undefined when calling createRecreationresourceDocument().',
      );
    }

    if (requestParameters['title'] == null) {
      throw new runtime.RequiredError(
        'title',
        'Required parameter "title" was null or undefined when calling createRecreationresourceDocument().',
      );
    }

    if (requestParameters['file'] == null) {
      throw new runtime.RequiredError(
        'file',
        'Required parameter "file" was null or undefined when calling createRecreationresourceDocument().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('keycloak', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const consumes: runtime.Consume[] = [
      { contentType: 'multipart/form-data' },
    ];
    // @ts-ignore: canConsumeForm may be unused
    const canConsumeForm = runtime.canConsumeForm(consumes);

    let formParams: { append(param: string, value: any): any };
    let useForm = false;
    // use FormData to transmit files using content-type "multipart/form-data"
    useForm = canConsumeForm;
    if (useForm) {
      formParams = new FormData();
    } else {
      formParams = new URLSearchParams();
    }

    if (requestParameters['title'] != null) {
      formParams.append('title', requestParameters['title'] as any);
    }

    if (requestParameters['file'] != null) {
      formParams.append('file', requestParameters['file'] as any);
    }

    let urlPath = `/api/v1/recreation-resources/{rec_resource_id}/docs`;
    urlPath = urlPath.replace(
      `{${'rec_resource_id'}}`,
      encodeURIComponent(String(requestParameters['recResourceId'])),
    );

    const response = await this.request(
      {
        path: urlPath,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: formParams,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      RecreationResourceDocDtoFromJSON(jsonValue),
    );
  }

  /**
   * Create a new Document Resource with an uploaded file
   */
  async createRecreationresourceDocument(
    requestParameters: CreateRecreationresourceDocumentRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<RecreationResourceDocDto> {
    const response = await this.createRecreationresourceDocumentRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Create a new Image Resource with an uploaded file
   */
  async createRecreationresourceImageRaw(
    requestParameters: CreateRecreationresourceImageRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<RecreationResourceImageDto>> {
    if (requestParameters['recResourceId'] == null) {
      throw new runtime.RequiredError(
        'recResourceId',
        'Required parameter "recResourceId" was null or undefined when calling createRecreationresourceImage().',
      );
    }

    if (requestParameters['caption'] == null) {
      throw new runtime.RequiredError(
        'caption',
        'Required parameter "caption" was null or undefined when calling createRecreationresourceImage().',
      );
    }

    if (requestParameters['file'] == null) {
      throw new runtime.RequiredError(
        'file',
        'Required parameter "file" was null or undefined when calling createRecreationresourceImage().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('keycloak', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const consumes: runtime.Consume[] = [
      { contentType: 'multipart/form-data' },
    ];
    // @ts-ignore: canConsumeForm may be unused
    const canConsumeForm = runtime.canConsumeForm(consumes);

    let formParams: { append(param: string, value: any): any };
    let useForm = false;
    // use FormData to transmit files using content-type "multipart/form-data"
    useForm = canConsumeForm;
    if (useForm) {
      formParams = new FormData();
    } else {
      formParams = new URLSearchParams();
    }

    if (requestParameters['caption'] != null) {
      formParams.append('caption', requestParameters['caption'] as any);
    }

    if (requestParameters['file'] != null) {
      formParams.append('file', requestParameters['file'] as any);
    }

    let urlPath = `/api/v1/recreation-resources/{rec_resource_id}/images`;
    urlPath = urlPath.replace(
      `{${'rec_resource_id'}}`,
      encodeURIComponent(String(requestParameters['recResourceId'])),
    );

    const response = await this.request(
      {
        path: urlPath,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: formParams,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      RecreationResourceImageDtoFromJSON(jsonValue),
    );
  }

  /**
   * Create a new Image Resource with an uploaded file
   */
  async createRecreationresourceImage(
    requestParameters: CreateRecreationresourceImageRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<RecreationResourceImageDto> {
    const response = await this.createRecreationresourceImageRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Delete a Document Resource
   */
  async deleteDocumentResourceRaw(
    requestParameters: DeleteDocumentResourceRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<RecreationResourceDocDto>> {
    if (requestParameters['recResourceId'] == null) {
      throw new runtime.RequiredError(
        'recResourceId',
        'Required parameter "recResourceId" was null or undefined when calling deleteDocumentResource().',
      );
    }

    if (requestParameters['refId'] == null) {
      throw new runtime.RequiredError(
        'refId',
        'Required parameter "refId" was null or undefined when calling deleteDocumentResource().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('keycloak', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/api/v1/recreation-resources/{rec_resource_id}/docs/{ref_id}`;
    urlPath = urlPath.replace(
      `{${'rec_resource_id'}}`,
      encodeURIComponent(String(requestParameters['recResourceId'])),
    );
    urlPath = urlPath.replace(
      `{${'ref_id'}}`,
      encodeURIComponent(String(requestParameters['refId'])),
    );

    const response = await this.request(
      {
        path: urlPath,
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      RecreationResourceDocDtoFromJSON(jsonValue),
    );
  }

  /**
   * Delete a Document Resource
   */
  async deleteDocumentResource(
    requestParameters: DeleteDocumentResourceRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<RecreationResourceDocDto> {
    const response = await this.deleteDocumentResourceRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Deletes the document from S3 and removes the database record. The s3_key should be URL-encoded.
   * Delete an establishment order document
   */
  async deleteEstablishmentOrderDocRaw(
    requestParameters: DeleteEstablishmentOrderDocRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<EstablishmentOrderDocDto>> {
    if (requestParameters['recResourceId'] == null) {
      throw new runtime.RequiredError(
        'recResourceId',
        'Required parameter "recResourceId" was null or undefined when calling deleteEstablishmentOrderDoc().',
      );
    }

    if (requestParameters['s3Key'] == null) {
      throw new runtime.RequiredError(
        's3Key',
        'Required parameter "s3Key" was null or undefined when calling deleteEstablishmentOrderDoc().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('keycloak', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/api/v1/recreation-resources/{rec_resource_id}/establishment-order-docs/{s3_key}`;
    urlPath = urlPath.replace(
      `{${'rec_resource_id'}}`,
      encodeURIComponent(String(requestParameters['recResourceId'])),
    );
    urlPath = urlPath.replace(
      `{${'s3_key'}}`,
      encodeURIComponent(String(requestParameters['s3Key'])),
    );

    const response = await this.request(
      {
        path: urlPath,
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      EstablishmentOrderDocDtoFromJSON(jsonValue),
    );
  }

  /**
   * Deletes the document from S3 and removes the database record. The s3_key should be URL-encoded.
   * Delete an establishment order document
   */
  async deleteEstablishmentOrderDoc(
    requestParameters: DeleteEstablishmentOrderDocRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<EstablishmentOrderDocDto> {
    const response = await this.deleteEstablishmentOrderDocRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Delete an image Resource
   */
  async deleteImageResourceRaw(
    requestParameters: DeleteImageResourceRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<RecreationResourceImageDto>> {
    if (requestParameters['recResourceId'] == null) {
      throw new runtime.RequiredError(
        'recResourceId',
        'Required parameter "recResourceId" was null or undefined when calling deleteImageResource().',
      );
    }

    if (requestParameters['refId'] == null) {
      throw new runtime.RequiredError(
        'refId',
        'Required parameter "refId" was null or undefined when calling deleteImageResource().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('keycloak', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/api/v1/recreation-resources/{rec_resource_id}/images/{ref_id}`;
    urlPath = urlPath.replace(
      `{${'rec_resource_id'}}`,
      encodeURIComponent(String(requestParameters['recResourceId'])),
    );
    urlPath = urlPath.replace(
      `{${'ref_id'}}`,
      encodeURIComponent(String(requestParameters['refId'])),
    );

    const response = await this.request(
      {
        path: urlPath,
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      RecreationResourceImageDtoFromJSON(jsonValue),
    );
  }

  /**
   * Delete an image Resource
   */
  async deleteImageResource(
    requestParameters: DeleteImageResourceRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<RecreationResourceImageDto> {
    const response = await this.deleteImageResourceRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Returns a list of establishment order documents with presigned URLs for download
   * Get all establishment order documents for a recreation resource
   */
  async getAllEstablishmentOrderDocsRaw(
    requestParameters: GetAllEstablishmentOrderDocsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<EstablishmentOrderDocDto>>> {
    if (requestParameters['recResourceId'] == null) {
      throw new runtime.RequiredError(
        'recResourceId',
        'Required parameter "recResourceId" was null or undefined when calling getAllEstablishmentOrderDocs().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('keycloak', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/api/v1/recreation-resources/{rec_resource_id}/establishment-order-docs`;
    urlPath = urlPath.replace(
      `{${'rec_resource_id'}}`,
      encodeURIComponent(String(requestParameters['recResourceId'])),
    );

    const response = await this.request(
      {
        path: urlPath,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(EstablishmentOrderDocDtoFromJSON),
    );
  }

  /**
   * Returns a list of establishment order documents with presigned URLs for download
   * Get all establishment order documents for a recreation resource
   */
  async getAllEstablishmentOrderDocs(
    requestParameters: GetAllEstablishmentOrderDocsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<EstablishmentOrderDocDto>> {
    const response = await this.getAllEstablishmentOrderDocsRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Get one document resource by reference ID
   */
  async getDocumentResourceByIdRaw(
    requestParameters: GetDocumentResourceByIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<RecreationResourceDocDto>> {
    if (requestParameters['recResourceId'] == null) {
      throw new runtime.RequiredError(
        'recResourceId',
        'Required parameter "recResourceId" was null or undefined when calling getDocumentResourceById().',
      );
    }

    if (requestParameters['refId'] == null) {
      throw new runtime.RequiredError(
        'refId',
        'Required parameter "refId" was null or undefined when calling getDocumentResourceById().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('keycloak', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/api/v1/recreation-resources/{rec_resource_id}/docs/{ref_id}`;
    urlPath = urlPath.replace(
      `{${'rec_resource_id'}}`,
      encodeURIComponent(String(requestParameters['recResourceId'])),
    );
    urlPath = urlPath.replace(
      `{${'ref_id'}}`,
      encodeURIComponent(String(requestParameters['refId'])),
    );

    const response = await this.request(
      {
        path: urlPath,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      RecreationResourceDocDtoFromJSON(jsonValue),
    );
  }

  /**
   * Get one document resource by reference ID
   */
  async getDocumentResourceById(
    requestParameters: GetDocumentResourceByIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<RecreationResourceDocDto> {
    const response = await this.getDocumentResourceByIdRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Get all documents related to the resource
   */
  async getDocumentsByRecResourceIdRaw(
    requestParameters: GetDocumentsByRecResourceIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<RecreationResourceDocDto>>> {
    if (requestParameters['recResourceId'] == null) {
      throw new runtime.RequiredError(
        'recResourceId',
        'Required parameter "recResourceId" was null or undefined when calling getDocumentsByRecResourceId().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('keycloak', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/api/v1/recreation-resources/{rec_resource_id}/docs`;
    urlPath = urlPath.replace(
      `{${'rec_resource_id'}}`,
      encodeURIComponent(String(requestParameters['recResourceId'])),
    );

    const response = await this.request(
      {
        path: urlPath,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(RecreationResourceDocDtoFromJSON),
    );
  }

  /**
   * Get all documents related to the resource
   */
  async getDocumentsByRecResourceId(
    requestParameters: GetDocumentsByRecResourceIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<RecreationResourceDocDto>> {
    const response = await this.getDocumentsByRecResourceIdRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Get one image resource by reference ID
   */
  async getImageResourceByIdRaw(
    requestParameters: GetImageResourceByIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<RecreationResourceImageDto>> {
    if (requestParameters['recResourceId'] == null) {
      throw new runtime.RequiredError(
        'recResourceId',
        'Required parameter "recResourceId" was null or undefined when calling getImageResourceById().',
      );
    }

    if (requestParameters['refId'] == null) {
      throw new runtime.RequiredError(
        'refId',
        'Required parameter "refId" was null or undefined when calling getImageResourceById().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('keycloak', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/api/v1/recreation-resources/{rec_resource_id}/images/{ref_id}`;
    urlPath = urlPath.replace(
      `{${'rec_resource_id'}}`,
      encodeURIComponent(String(requestParameters['recResourceId'])),
    );
    urlPath = urlPath.replace(
      `{${'ref_id'}}`,
      encodeURIComponent(String(requestParameters['refId'])),
    );

    const response = await this.request(
      {
        path: urlPath,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      RecreationResourceImageDtoFromJSON(jsonValue),
    );
  }

  /**
   * Get one image resource by reference ID
   */
  async getImageResourceById(
    requestParameters: GetImageResourceByIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<RecreationResourceImageDto> {
    const response = await this.getImageResourceByIdRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Get all images related to the resource
   */
  async getImagesByRecResourceIdRaw(
    requestParameters: GetImagesByRecResourceIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<RecreationResourceImageDto>>> {
    if (requestParameters['recResourceId'] == null) {
      throw new runtime.RequiredError(
        'recResourceId',
        'Required parameter "recResourceId" was null or undefined when calling getImagesByRecResourceId().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('keycloak', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/api/v1/recreation-resources/{rec_resource_id}/images`;
    urlPath = urlPath.replace(
      `{${'rec_resource_id'}}`,
      encodeURIComponent(String(requestParameters['recResourceId'])),
    );

    const response = await this.request(
      {
        path: urlPath,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(RecreationResourceImageDtoFromJSON),
    );
  }

  /**
   * Get all images related to the resource
   */
  async getImagesByRecResourceId(
    requestParameters: GetImagesByRecResourceIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<RecreationResourceImageDto>> {
    const response = await this.getImagesByRecResourceIdRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Retrieve all available values for a given option type. Valid types: activities, regions, access, sub-access, maintenance, resourceType, feeType, recreationStatus, structure, controlAccessCode
   * List all options for a type
   */
  async getOptionsByTypeRaw(
    requestParameters: GetOptionsByTypeRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<OptionDto>>> {
    if (requestParameters['type'] == null) {
      throw new runtime.RequiredError(
        'type',
        'Required parameter "type" was null or undefined when calling getOptionsByType().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('keycloak', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/api/v1/recreation-resources/options/{type}`;
    urlPath = urlPath.replace(
      `{${'type'}}`,
      encodeURIComponent(String(requestParameters['type'])),
    );

    const response = await this.request(
      {
        path: urlPath,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(OptionDtoFromJSON),
    );
  }

  /**
   * Retrieve all available values for a given option type. Valid types: activities, regions, access, sub-access, maintenance, resourceType, feeType, recreationStatus, structure, controlAccessCode
   * List all options for a type
   */
  async getOptionsByType(
    requestParameters: GetOptionsByTypeRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<OptionDto>> {
    const response = await this.getOptionsByTypeRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Find recreation resource by ID
   */
  async getRecreationResourceByIdRaw(
    requestParameters: GetRecreationResourceByIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<RecreationResourceDetailDto>> {
    if (requestParameters['recResourceId'] == null) {
      throw new runtime.RequiredError(
        'recResourceId',
        'Required parameter "recResourceId" was null or undefined when calling getRecreationResourceById().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('keycloak', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/api/recreation-resources/{rec_resource_id}`;
    urlPath = urlPath.replace(
      `{${'rec_resource_id'}}`,
      encodeURIComponent(String(requestParameters['recResourceId'])),
    );

    const response = await this.request(
      {
        path: urlPath,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      RecreationResourceDetailDtoFromJSON(jsonValue),
    );
  }

  /**
   * Find recreation resource by ID
   */
  async getRecreationResourceById(
    requestParameters: GetRecreationResourceByIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<RecreationResourceDetailDto> {
    const response = await this.getRecreationResourceByIdRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   *
   */
  async getRecreationResourceSuggestionsRaw(
    requestParameters: GetRecreationResourceSuggestionsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<SuggestionsResponseDto>> {
    if (requestParameters['searchTerm'] == null) {
      throw new runtime.RequiredError(
        'searchTerm',
        'Required parameter "searchTerm" was null or undefined when calling getRecreationResourceSuggestions().',
      );
    }

    const queryParameters: any = {};

    if (requestParameters['searchTerm'] != null) {
      queryParameters['searchTerm'] = requestParameters['searchTerm'];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('keycloak', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/api/recreation-resources/suggestions`;

    const response = await this.request(
      {
        path: urlPath,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      SuggestionsResponseDtoFromJSON(jsonValue),
    );
  }

  /**
   *
   */
  async getRecreationResourceSuggestions(
    requestParameters: GetRecreationResourceSuggestionsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<SuggestionsResponseDto> {
    const response = await this.getRecreationResourceSuggestionsRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Update a Document Resource
   */
  async updateDocumentResourceRaw(
    requestParameters: UpdateDocumentResourceRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<RecreationResourceDocDto>> {
    if (requestParameters['recResourceId'] == null) {
      throw new runtime.RequiredError(
        'recResourceId',
        'Required parameter "recResourceId" was null or undefined when calling updateDocumentResource().',
      );
    }

    if (requestParameters['refId'] == null) {
      throw new runtime.RequiredError(
        'refId',
        'Required parameter "refId" was null or undefined when calling updateDocumentResource().',
      );
    }

    if (requestParameters['createRecreationResourceDocBodyDto'] == null) {
      throw new runtime.RequiredError(
        'createRecreationResourceDocBodyDto',
        'Required parameter "createRecreationResourceDocBodyDto" was null or undefined when calling updateDocumentResource().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('keycloak', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/api/v1/recreation-resources/{rec_resource_id}/docs/{ref_id}`;
    urlPath = urlPath.replace(
      `{${'rec_resource_id'}}`,
      encodeURIComponent(String(requestParameters['recResourceId'])),
    );
    urlPath = urlPath.replace(
      `{${'ref_id'}}`,
      encodeURIComponent(String(requestParameters['refId'])),
    );

    const response = await this.request(
      {
        path: urlPath,
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: CreateRecreationResourceDocBodyDtoToJSON(
          requestParameters['createRecreationResourceDocBodyDto'],
        ),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      RecreationResourceDocDtoFromJSON(jsonValue),
    );
  }

  /**
   * Update a Document Resource
   */
  async updateDocumentResource(
    requestParameters: UpdateDocumentResourceRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<RecreationResourceDocDto> {
    const response = await this.updateDocumentResourceRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Update an Image Resource
   */
  async updateImageResourceRaw(
    requestParameters: UpdateImageResourceRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<RecreationResourceImageDto>> {
    if (requestParameters['recResourceId'] == null) {
      throw new runtime.RequiredError(
        'recResourceId',
        'Required parameter "recResourceId" was null or undefined when calling updateImageResource().',
      );
    }

    if (requestParameters['refId'] == null) {
      throw new runtime.RequiredError(
        'refId',
        'Required parameter "refId" was null or undefined when calling updateImageResource().',
      );
    }

    if (requestParameters['createRecreationResourceImageBodyDto'] == null) {
      throw new runtime.RequiredError(
        'createRecreationResourceImageBodyDto',
        'Required parameter "createRecreationResourceImageBodyDto" was null or undefined when calling updateImageResource().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('keycloak', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/api/v1/recreation-resources/{rec_resource_id}/images/{ref_id}`;
    urlPath = urlPath.replace(
      `{${'rec_resource_id'}}`,
      encodeURIComponent(String(requestParameters['recResourceId'])),
    );
    urlPath = urlPath.replace(
      `{${'ref_id'}}`,
      encodeURIComponent(String(requestParameters['refId'])),
    );

    const response = await this.request(
      {
        path: urlPath,
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: CreateRecreationResourceImageBodyDtoToJSON(
          requestParameters['createRecreationResourceImageBodyDto'],
        ),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      RecreationResourceImageDtoFromJSON(jsonValue),
    );
  }

  /**
   * Update an Image Resource
   */
  async updateImageResource(
    requestParameters: UpdateImageResourceRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<RecreationResourceImageDto> {
    const response = await this.updateImageResourceRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Updates a recreation resource. Automatically handles both direct fields and related table fields (description, driving_directions) based on the request content.
   * Update recreation resource by ID
   */
  async updateRecreationResourceByIdRaw(
    requestParameters: UpdateRecreationResourceByIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<RecreationResourceDetailDto>> {
    if (requestParameters['recResourceId'] == null) {
      throw new runtime.RequiredError(
        'recResourceId',
        'Required parameter "recResourceId" was null or undefined when calling updateRecreationResourceById().',
      );
    }

    if (requestParameters['updateRecreationResourceDto'] == null) {
      throw new runtime.RequiredError(
        'updateRecreationResourceDto',
        'Required parameter "updateRecreationResourceDto" was null or undefined when calling updateRecreationResourceById().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('keycloak', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }

    let urlPath = `/api/recreation-resources/{rec_resource_id}`;
    urlPath = urlPath.replace(
      `{${'rec_resource_id'}}`,
      encodeURIComponent(String(requestParameters['recResourceId'])),
    );

    const response = await this.request(
      {
        path: urlPath,
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: UpdateRecreationResourceDtoToJSON(
          requestParameters['updateRecreationResourceDto'],
        ),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      RecreationResourceDetailDtoFromJSON(jsonValue),
    );
  }

  /**
   * Updates a recreation resource. Automatically handles both direct fields and related table fields (description, driving_directions) based on the request content.
   * Update recreation resource by ID
   */
  async updateRecreationResourceById(
    requestParameters: UpdateRecreationResourceByIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<RecreationResourceDetailDto> {
    const response = await this.updateRecreationResourceByIdRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }
}

/**
 * @export
 */
export const GetOptionsByTypeTypeEnum = {
  Activities: 'activities',
  Regions: 'regions',
  Access: 'access',
  SubAccess: 'sub-access',
  Maintenance: 'maintenance',
  ResourceType: 'resourceType',
  FeeType: 'feeType',
  RecreationStatus: 'recreationStatus',
  Structure: 'structure',
  ControlAccessCode: 'controlAccessCode',
} as const;
export type GetOptionsByTypeTypeEnum =
  (typeof GetOptionsByTypeTypeEnum)[keyof typeof GetOptionsByTypeTypeEnum];
