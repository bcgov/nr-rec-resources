/* tslint:disable */
/* eslint-disable */
/**
 * Recreation Sites and Trails BC Admin API
 * RST Admin API documentation
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
/**
 *
 * @export
 * @interface PresignedUploadResponseDto
 */
export interface PresignedUploadResponseDto {
  /**
   * Presigned upload URL
   * @type {string}
   * @memberof PresignedUploadResponseDto
   */
  uploadUrl: string;
  /**
   * Upload ID for tracking
   * @type {string}
   * @memberof PresignedUploadResponseDto
   */
  uploadId: string;
  /**
   * Maximum file size allowed
   * @type {number}
   * @memberof PresignedUploadResponseDto
   */
  maxFileSize: number;
  /**
   * URL expiration time in seconds
   * @type {number}
   * @memberof PresignedUploadResponseDto
   */
  expiresIn: number;
  /**
   * S3 key for the uploaded file
   * @type {string}
   * @memberof PresignedUploadResponseDto
   */
  key: string;
}

/**
 * Check if a given object implements the PresignedUploadResponseDto interface.
 */
export function instanceOfPresignedUploadResponseDto(
  value: object,
): value is PresignedUploadResponseDto {
  if (!("uploadUrl" in value) || value["uploadUrl"] === undefined) return false;
  if (!("uploadId" in value) || value["uploadId"] === undefined) return false;
  if (!("maxFileSize" in value) || value["maxFileSize"] === undefined)
    return false;
  if (!("expiresIn" in value) || value["expiresIn"] === undefined) return false;
  if (!("key" in value) || value["key"] === undefined) return false;
  return true;
}

export function PresignedUploadResponseDtoFromJSON(
  json: any,
): PresignedUploadResponseDto {
  return PresignedUploadResponseDtoFromJSONTyped(json, false);
}

export function PresignedUploadResponseDtoFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): PresignedUploadResponseDto {
  if (json == null) {
    return json;
  }
  return {
    uploadUrl: json["uploadUrl"],
    uploadId: json["uploadId"],
    maxFileSize: json["maxFileSize"],
    expiresIn: json["expiresIn"],
    key: json["key"],
  };
}

export function PresignedUploadResponseDtoToJSON(
  json: any,
): PresignedUploadResponseDto {
  return PresignedUploadResponseDtoToJSONTyped(json, false);
}

export function PresignedUploadResponseDtoToJSONTyped(
  value?: PresignedUploadResponseDto | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    uploadUrl: value["uploadUrl"],
    uploadId: value["uploadId"],
    maxFileSize: value["maxFileSize"],
    expiresIn: value["expiresIn"],
    key: value["key"],
  };
}
