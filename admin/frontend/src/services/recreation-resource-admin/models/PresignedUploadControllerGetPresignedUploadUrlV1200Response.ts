/* tslint:disable */
/* eslint-disable */
/**
 * Recreation Sites and Trails BC Admin API
 * RST Admin API documentation
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
/**
 *
 * @export
 * @interface PresignedUploadControllerGetPresignedUploadUrlV1200Response
 */
export interface PresignedUploadControllerGetPresignedUploadUrlV1200Response {
  /**
   * Direct S3 upload URL
   * @type {string}
   * @memberof PresignedUploadControllerGetPresignedUploadUrlV1200Response
   */
  uploadUrl?: string;
  /**
   * Unique upload session ID
   * @type {string}
   * @memberof PresignedUploadControllerGetPresignedUploadUrlV1200Response
   */
  uploadId?: string;
  /**
   * Maximum file size in bytes
   * @type {number}
   * @memberof PresignedUploadControllerGetPresignedUploadUrlV1200Response
   */
  maxFileSize?: number;
  /**
   * URL expiration time in seconds
   * @type {number}
   * @memberof PresignedUploadControllerGetPresignedUploadUrlV1200Response
   */
  expiresIn?: number;
  /**
   * S3 object key for tracking
   * @type {string}
   * @memberof PresignedUploadControllerGetPresignedUploadUrlV1200Response
   */
  key?: string;
}

/**
 * Check if a given object implements the PresignedUploadControllerGetPresignedUploadUrlV1200Response interface.
 */
export function instanceOfPresignedUploadControllerGetPresignedUploadUrlV1200Response(
  value: object,
): value is PresignedUploadControllerGetPresignedUploadUrlV1200Response {
  return true;
}

export function PresignedUploadControllerGetPresignedUploadUrlV1200ResponseFromJSON(
  json: any,
): PresignedUploadControllerGetPresignedUploadUrlV1200Response {
  return PresignedUploadControllerGetPresignedUploadUrlV1200ResponseFromJSONTyped(
    json,
    false,
  );
}

export function PresignedUploadControllerGetPresignedUploadUrlV1200ResponseFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): PresignedUploadControllerGetPresignedUploadUrlV1200Response {
  if (json == null) {
    return json;
  }
  return {
    uploadUrl: json["uploadUrl"] == null ? undefined : json["uploadUrl"],
    uploadId: json["uploadId"] == null ? undefined : json["uploadId"],
    maxFileSize: json["maxFileSize"] == null ? undefined : json["maxFileSize"],
    expiresIn: json["expiresIn"] == null ? undefined : json["expiresIn"],
    key: json["key"] == null ? undefined : json["key"],
  };
}

export function PresignedUploadControllerGetPresignedUploadUrlV1200ResponseToJSON(
  json: any,
): PresignedUploadControllerGetPresignedUploadUrlV1200Response {
  return PresignedUploadControllerGetPresignedUploadUrlV1200ResponseToJSONTyped(
    json,
    false,
  );
}

export function PresignedUploadControllerGetPresignedUploadUrlV1200ResponseToJSONTyped(
  value?: PresignedUploadControllerGetPresignedUploadUrlV1200Response | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    uploadUrl: value["uploadUrl"],
    uploadId: value["uploadId"],
    maxFileSize: value["maxFileSize"],
    expiresIn: value["expiresIn"],
    key: value["key"],
  };
}
