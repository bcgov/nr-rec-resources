/* tslint:disable */
/* eslint-disable */
/**
 * FSA Forest Client API
 * Forest Client API Application - Version 298
 *
 * The version of the OpenAPI document: 298
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ClientPublicViewDto,
} from '../models/index';
import {
    ClientPublicViewDtoFromJSON,
    ClientPublicViewDtoToJSON,
} from '../models/index';

export interface SearchByAcronymNameNumberRequest {
    xAPIKEY: string;
    page?: number;
    size?: number;
    name?: string;
    acronym?: string;
    number?: string;
}

export interface SearchClientsRequest {
    xAPIKEY: string;
    page?: number;
    size?: number;
    id?: Array<string>;
}

/**
 * 
 */
export class ClientSearchAPIApi extends runtime.BaseAPI {

    /**
     * Search for clients based on the provided parameters. It uses a fuzzy match to search for the client name. The cutout for the fuzzy match is 0.8. The search is case insensitive.
     * Search for clients
     */
    async searchByAcronymNameNumberRaw(requestParameters: SearchByAcronymNameNumberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ClientPublicViewDto>>> {
        if (requestParameters['xAPIKEY'] == null) {
            throw new runtime.RequiredError(
                'xAPIKEY',
                'Required parameter "xAPIKEY" was null or undefined when calling searchByAcronymNameNumber().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['acronym'] != null) {
            queryParameters['acronym'] = requestParameters['acronym'];
        }

        if (requestParameters['number'] != null) {
            queryParameters['number'] = requestParameters['number'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xAPIKEY'] != null) {
            headerParameters['X-API-KEY'] = String(requestParameters['xAPIKEY']);
        }

        const response = await this.request({
            path: `/api/clients/search/by`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ClientPublicViewDtoFromJSON));
    }

    /**
     * Search for clients based on the provided parameters. It uses a fuzzy match to search for the client name. The cutout for the fuzzy match is 0.8. The search is case insensitive.
     * Search for clients
     */
    async searchByAcronymNameNumber(requestParameters: SearchByAcronymNameNumberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ClientPublicViewDto>> {
        const response = await this.searchByAcronymNameNumberRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search for clients based on the provided client IDs
     * Search for clients
     */
    async searchClientsRaw(requestParameters: SearchClientsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ClientPublicViewDto>>> {
        if (requestParameters['xAPIKEY'] == null) {
            throw new runtime.RequiredError(
                'xAPIKEY',
                'Required parameter "xAPIKEY" was null or undefined when calling searchClients().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xAPIKEY'] != null) {
            headerParameters['X-API-KEY'] = String(requestParameters['xAPIKEY']);
        }

        const response = await this.request({
            path: `/api/clients/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ClientPublicViewDtoFromJSON));
    }

    /**
     * Search for clients based on the provided client IDs
     * Search for clients
     */
    async searchClients(requestParameters: SearchClientsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ClientPublicViewDto>> {
        const response = await this.searchClientsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
