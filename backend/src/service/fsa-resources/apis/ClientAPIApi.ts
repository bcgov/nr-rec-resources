/* tslint:disable */
/* eslint-disable */
/**
 * FSA Forest Client API
 * Forest Client API Application - Version 298
 *
 * The version of the OpenAPI document: 298
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ClientLocationDto,
  ClientPublicViewDto,
} from '../models/index';
import {
    ClientLocationDtoFromJSON,
    ClientLocationDtoToJSON,
    ClientPublicViewDtoFromJSON,
    ClientPublicViewDtoToJSON,
} from '../models/index';

export interface FindAllNonIndividualsRequest {
    xAPIKEY: string;
    page?: number;
    size?: number;
    sortedColumnName?: string;
}

export interface FindByAcronymRequest {
    acronym: string;
    xAPIKEY: string;
}

export interface FindByClientNumberRequest {
    clientNumber: string;
    xAPIKEY: string;
}

export interface FindByClientNumberOrNameRequest {
    clientNumberOrName: string;
    xAPIKEY: string;
    page?: number;
    size?: number;
}

export interface FindByNamesRequest {
    xAPIKEY: string;
    page?: number;
    size?: number;
    clientName?: string;
    clientFirstName?: string;
    clientMiddleName?: string;
    clientTypeCodes?: Array<string>;
}

export interface GetClientLocationDetailsRequest {
    clientNumber: string;
    locationNumber: string;
    xAPIKEY: string;
}

export interface ListClientLocationsRequest {
    clientNumber: string;
    xAPIKEY: string;
    page?: number;
    size?: number;
}

/**
 * 
 */
export class ClientAPIApi extends runtime.BaseAPI {

    /**
     * Search all non-individual client. It will return active and inactive
     */
    async findAllNonIndividualsRaw(requestParameters: FindAllNonIndividualsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ClientPublicViewDto>>> {
        if (requestParameters['xAPIKEY'] == null) {
            throw new runtime.RequiredError(
                'xAPIKEY',
                'Required parameter "xAPIKEY" was null or undefined when calling findAllNonIndividuals().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['sortedColumnName'] != null) {
            queryParameters['sortedColumnName'] = requestParameters['sortedColumnName'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xAPIKEY'] != null) {
            headerParameters['X-API-KEY'] = String(requestParameters['xAPIKEY']);
        }

        const response = await this.request({
            path: `/api/clients/findAllNonIndividuals`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ClientPublicViewDtoFromJSON));
    }

    /**
     * Search all non-individual client. It will return active and inactive
     */
    async findAllNonIndividuals(requestParameters: FindAllNonIndividualsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ClientPublicViewDto>> {
        const response = await this.findAllNonIndividualsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search a client by it\'s acronym. It will return active and inactive
     */
    async findByAcronymRaw(requestParameters: FindByAcronymRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ClientPublicViewDto>>> {
        if (requestParameters['acronym'] == null) {
            throw new runtime.RequiredError(
                'acronym',
                'Required parameter "acronym" was null or undefined when calling findByAcronym().'
            );
        }

        if (requestParameters['xAPIKEY'] == null) {
            throw new runtime.RequiredError(
                'xAPIKEY',
                'Required parameter "xAPIKEY" was null or undefined when calling findByAcronym().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['acronym'] != null) {
            queryParameters['acronym'] = requestParameters['acronym'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xAPIKEY'] != null) {
            headerParameters['X-API-KEY'] = String(requestParameters['xAPIKEY']);
        }

        const response = await this.request({
            path: `/api/clients/findByAcronym`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ClientPublicViewDtoFromJSON));
    }

    /**
     * Search a client by it\'s acronym. It will return active and inactive
     */
    async findByAcronym(requestParameters: FindByAcronymRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ClientPublicViewDto>> {
        const response = await this.findByAcronymRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search clients by client number. It will return active and inactive
     */
    async findByClientNumberRaw(requestParameters: FindByClientNumberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClientPublicViewDto>> {
        if (requestParameters['clientNumber'] == null) {
            throw new runtime.RequiredError(
                'clientNumber',
                'Required parameter "clientNumber" was null or undefined when calling findByClientNumber().'
            );
        }

        if (requestParameters['xAPIKEY'] == null) {
            throw new runtime.RequiredError(
                'xAPIKEY',
                'Required parameter "xAPIKEY" was null or undefined when calling findByClientNumber().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xAPIKEY'] != null) {
            headerParameters['X-API-KEY'] = String(requestParameters['xAPIKEY']);
        }

        const response = await this.request({
            path: `/api/clients/findByClientNumber/{clientNumber}`.replace(`{${"clientNumber"}}`, encodeURIComponent(String(requestParameters['clientNumber']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClientPublicViewDtoFromJSON(jsonValue));
    }

    /**
     * Search clients by client number. It will return active and inactive
     */
    async findByClientNumber(requestParameters: FindByClientNumberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClientPublicViewDto> {
        const response = await this.findByClientNumberRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search clients by client number or client name. It will return active and inactive
     */
    async findByClientNumberOrNameRaw(requestParameters: FindByClientNumberOrNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClientPublicViewDto>> {
        if (requestParameters['clientNumberOrName'] == null) {
            throw new runtime.RequiredError(
                'clientNumberOrName',
                'Required parameter "clientNumberOrName" was null or undefined when calling findByClientNumberOrName().'
            );
        }

        if (requestParameters['xAPIKEY'] == null) {
            throw new runtime.RequiredError(
                'xAPIKEY',
                'Required parameter "xAPIKEY" was null or undefined when calling findByClientNumberOrName().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xAPIKEY'] != null) {
            headerParameters['X-API-KEY'] = String(requestParameters['xAPIKEY']);
        }

        const response = await this.request({
            path: `/api/clients/findByClientNumberOrName/{clientNumberOrName}`.replace(`{${"clientNumberOrName"}}`, encodeURIComponent(String(requestParameters['clientNumberOrName']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClientPublicViewDtoFromJSON(jsonValue));
    }

    /**
     * Search clients by client number or client name. It will return active and inactive
     */
    async findByClientNumberOrName(requestParameters: FindByClientNumberOrNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClientPublicViewDto> {
        const response = await this.findByClientNumberOrNameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search a client by it\'s name (including first, middle and last) and client type. It will return active and inactive
     */
    async findByNamesRaw(requestParameters: FindByNamesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ClientPublicViewDto>>> {
        if (requestParameters['xAPIKEY'] == null) {
            throw new runtime.RequiredError(
                'xAPIKEY',
                'Required parameter "xAPIKEY" was null or undefined when calling findByNames().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['clientName'] != null) {
            queryParameters['clientName'] = requestParameters['clientName'];
        }

        if (requestParameters['clientFirstName'] != null) {
            queryParameters['clientFirstName'] = requestParameters['clientFirstName'];
        }

        if (requestParameters['clientMiddleName'] != null) {
            queryParameters['clientMiddleName'] = requestParameters['clientMiddleName'];
        }

        if (requestParameters['clientTypeCodes'] != null) {
            queryParameters['clientTypeCodes'] = requestParameters['clientTypeCodes'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xAPIKEY'] != null) {
            headerParameters['X-API-KEY'] = String(requestParameters['xAPIKEY']);
        }

        const response = await this.request({
            path: `/api/clients/findByNames`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ClientPublicViewDtoFromJSON));
    }

    /**
     * Search a client by it\'s name (including first, middle and last) and client type. It will return active and inactive
     */
    async findByNames(requestParameters: FindByNamesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ClientPublicViewDto>> {
        const response = await this.findByNamesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the client location based on client number and location id
     */
    async getClientLocationDetailsRaw(requestParameters: GetClientLocationDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClientLocationDto>> {
        if (requestParameters['clientNumber'] == null) {
            throw new runtime.RequiredError(
                'clientNumber',
                'Required parameter "clientNumber" was null or undefined when calling getClientLocationDetails().'
            );
        }

        if (requestParameters['locationNumber'] == null) {
            throw new runtime.RequiredError(
                'locationNumber',
                'Required parameter "locationNumber" was null or undefined when calling getClientLocationDetails().'
            );
        }

        if (requestParameters['xAPIKEY'] == null) {
            throw new runtime.RequiredError(
                'xAPIKEY',
                'Required parameter "xAPIKEY" was null or undefined when calling getClientLocationDetails().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xAPIKEY'] != null) {
            headerParameters['X-API-KEY'] = String(requestParameters['xAPIKEY']);
        }

        const response = await this.request({
            path: `/api/clients/{clientNumber}/locations/{locationNumber}`.replace(`{${"clientNumber"}}`, encodeURIComponent(String(requestParameters['clientNumber']))).replace(`{${"locationNumber"}}`, encodeURIComponent(String(requestParameters['locationNumber']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClientLocationDtoFromJSON(jsonValue));
    }

    /**
     * Get the client location based on client number and location id
     */
    async getClientLocationDetails(requestParameters: GetClientLocationDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClientLocationDto> {
        const response = await this.getClientLocationDetailsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search for client location based on client number
     */
    async listClientLocationsRaw(requestParameters: ListClientLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ClientLocationDto>>> {
        if (requestParameters['clientNumber'] == null) {
            throw new runtime.RequiredError(
                'clientNumber',
                'Required parameter "clientNumber" was null or undefined when calling listClientLocations().'
            );
        }

        if (requestParameters['xAPIKEY'] == null) {
            throw new runtime.RequiredError(
                'xAPIKEY',
                'Required parameter "xAPIKEY" was null or undefined when calling listClientLocations().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xAPIKEY'] != null) {
            headerParameters['X-API-KEY'] = String(requestParameters['xAPIKEY']);
        }

        const response = await this.request({
            path: `/api/clients/{clientNumber}/locations`.replace(`{${"clientNumber"}}`, encodeURIComponent(String(requestParameters['clientNumber']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ClientLocationDtoFromJSON));
    }

    /**
     * Search for client location based on client number
     */
    async listClientLocations(requestParameters: ListClientLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ClientLocationDto>> {
        const response = await this.listClientLocationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
