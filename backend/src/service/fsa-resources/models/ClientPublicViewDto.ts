/* tslint:disable */
/* eslint-disable */
/**
 * FSA Forest Client API
 * Forest Client API Application - Version 298
 *
 * The version of the OpenAPI document: 298
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * A snapshot of the client information
 * @export
 * @interface ClientPublicViewDto
 */
export interface ClientPublicViewDto {
    /**
     * The client number
     * @type {string}
     * @memberof ClientPublicViewDto
     */
    clientNumber?: string;
    /**
     * The client last name if it's an individual or
     *  the company name if it's a company
     * @type {string}
     * @memberof ClientPublicViewDto
     */
    clientName?: string;
    /**
     * The first name of the individual,
     *  or null if it's a company
     * @type {string}
     * @memberof ClientPublicViewDto
     */
    legalFirstName?: string;
    /**
     * The middle name of the individual,
     *  or null if it's a company
     * @type {string}
     * @memberof ClientPublicViewDto
     */
    legalMiddleName?: string;
    /**
     * The status of the client, can be any of the following:<br>
     * 
     * ACT (Active)<br>
     * DAC (Deactivated)<br>
     * DEC (Deceased)<br>
     * REC (Receivership)<br>
     * SPN (Suspended)
     * @type {string}
     * @memberof ClientPublicViewDto
     */
    clientStatusCode?: string;
    /**
     * The type of client, can be any of the following:<br>
     * 
     * A (Association)<br>
     * B (First Nation Band)<br>
     * C (Corporation)<br>
     * F (Ministry of Forests and Range)<br>
     * G (Government)<br>
     * I (Individual)<br>
     * L (Limited Partnership)<br>
     * P (General Partnership)<br>
     * R (First Nation Group)<br>
     * S (Society)<br>
     * T (First Nation Tribal Council)<br>
     * U (Unregistered Company)
     * @type {string}
     * @memberof ClientPublicViewDto
     */
    clientTypeCode?: string;
    /**
     * An acronyms for this client
     * @type {string}
     * @memberof ClientPublicViewDto
     */
    acronym?: string;
}

/**
 * Check if a given object implements the ClientPublicViewDto interface.
 */
export function instanceOfClientPublicViewDto(value: object): value is ClientPublicViewDto {
    return true;
}

export function ClientPublicViewDtoFromJSON(json: any): ClientPublicViewDto {
    return ClientPublicViewDtoFromJSONTyped(json, false);
}

export function ClientPublicViewDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): ClientPublicViewDto {
    if (json == null) {
        return json;
    }
    return {
        
        'clientNumber': json['clientNumber'] == null ? undefined : json['clientNumber'],
        'clientName': json['clientName'] == null ? undefined : json['clientName'],
        'legalFirstName': json['legalFirstName'] == null ? undefined : json['legalFirstName'],
        'legalMiddleName': json['legalMiddleName'] == null ? undefined : json['legalMiddleName'],
        'clientStatusCode': json['clientStatusCode'] == null ? undefined : json['clientStatusCode'],
        'clientTypeCode': json['clientTypeCode'] == null ? undefined : json['clientTypeCode'],
        'acronym': json['acronym'] == null ? undefined : json['acronym'],
    };
}

export function ClientPublicViewDtoToJSON(json: any): ClientPublicViewDto {
    return ClientPublicViewDtoToJSONTyped(json, false);
}

export function ClientPublicViewDtoToJSONTyped(value?: ClientPublicViewDto | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'clientNumber': value['clientNumber'],
        'clientName': value['clientName'],
        'legalFirstName': value['legalFirstName'],
        'legalMiddleName': value['legalMiddleName'],
        'clientStatusCode': value['clientStatusCode'],
        'clientTypeCode': value['clientTypeCode'],
        'acronym': value['acronym'],
    };
}

