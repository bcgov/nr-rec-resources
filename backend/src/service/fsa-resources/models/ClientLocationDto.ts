/* tslint:disable */
/* eslint-disable */
/**
 * FSA Forest Client API
 * Forest Client API Application - Version 298
 *
 * The version of the OpenAPI document: 298
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * A location associated to a client
 * @export
 * @interface ClientLocationDto
 */
export interface ClientLocationDto {
    /**
     * The client number
     * @type {string}
     * @memberof ClientLocationDto
     */
    clientNumber?: string;
    /**
     * The location index
     * @type {string}
     * @memberof ClientLocationDto
     */
    locationCode?: string;
    /**
     * The reference name of the location
     * @type {string}
     * @memberof ClientLocationDto
     */
    locationName?: string;
    /**
     * The internal company code
     * @type {string}
     * @memberof ClientLocationDto
     */
    companyCode?: string;
    /**
     * The address information
     * @type {string}
     * @memberof ClientLocationDto
     */
    address1?: string;
    /**
     * The address information
     * @type {string}
     * @memberof ClientLocationDto
     */
    address2?: string;
    /**
     * The address information
     * @type {string}
     * @memberof ClientLocationDto
     */
    address3?: string;
    /**
     * The city name
     * @type {string}
     * @memberof ClientLocationDto
     */
    city?: string;
    /**
     * The province/territory code
     * @type {string}
     * @memberof ClientLocationDto
     */
    province?: string;
    /**
     * The postal code/zip code
     * @type {string}
     * @memberof ClientLocationDto
     */
    postalCode?: string;
    /**
     * The country code
     * @type {string}
     * @memberof ClientLocationDto
     */
    country?: string;
    /**
     * The business phone number
     * @type {string}
     * @memberof ClientLocationDto
     */
    businessPhone?: string;
    /**
     * The home/personal phone number
     * @type {string}
     * @memberof ClientLocationDto
     */
    homePhone?: string;
    /**
     * The cellphone number
     * @type {string}
     * @memberof ClientLocationDto
     */
    cellPhone?: string;
    /**
     * The fax number
     * @type {string}
     * @memberof ClientLocationDto
     */
    faxNumber?: string;
    /**
     * The email address
     * @type {string}
     * @memberof ClientLocationDto
     */
    email?: string;
    /**
     * Define if this entry is expired or not<br>Y means yes<br>N means no
     * @type {string}
     * @memberof ClientLocationDto
     */
    expired?: ClientLocationDtoExpiredEnum;
    /**
     * Define if this entry is to be trusted or not<br>Y means yes<br>N means no
     * @type {string}
     * @memberof ClientLocationDto
     */
    trusted?: ClientLocationDtoTrustedEnum;
    /**
     * The date when the mail was returned
     * @type {Date}
     * @memberof ClientLocationDto
     */
    returnedMailDate?: Date;
    /**
     * An open field containing comments about the address
     * @type {string}
     * @memberof ClientLocationDto
     */
    comment?: string;
}


/**
 * @export
 */
export const ClientLocationDtoExpiredEnum = {
    Y: 'Y',
    N: 'N'
} as const;
export type ClientLocationDtoExpiredEnum = typeof ClientLocationDtoExpiredEnum[keyof typeof ClientLocationDtoExpiredEnum];

/**
 * @export
 */
export const ClientLocationDtoTrustedEnum = {
    Y: 'Y',
    N: 'N'
} as const;
export type ClientLocationDtoTrustedEnum = typeof ClientLocationDtoTrustedEnum[keyof typeof ClientLocationDtoTrustedEnum];


/**
 * Check if a given object implements the ClientLocationDto interface.
 */
export function instanceOfClientLocationDto(value: object): value is ClientLocationDto {
    return true;
}

export function ClientLocationDtoFromJSON(json: any): ClientLocationDto {
    return ClientLocationDtoFromJSONTyped(json, false);
}

export function ClientLocationDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): ClientLocationDto {
    if (json == null) {
        return json;
    }
    return {
        
        'clientNumber': json['clientNumber'] == null ? undefined : json['clientNumber'],
        'locationCode': json['locationCode'] == null ? undefined : json['locationCode'],
        'locationName': json['locationName'] == null ? undefined : json['locationName'],
        'companyCode': json['companyCode'] == null ? undefined : json['companyCode'],
        'address1': json['address1'] == null ? undefined : json['address1'],
        'address2': json['address2'] == null ? undefined : json['address2'],
        'address3': json['address3'] == null ? undefined : json['address3'],
        'city': json['city'] == null ? undefined : json['city'],
        'province': json['province'] == null ? undefined : json['province'],
        'postalCode': json['postalCode'] == null ? undefined : json['postalCode'],
        'country': json['country'] == null ? undefined : json['country'],
        'businessPhone': json['businessPhone'] == null ? undefined : json['businessPhone'],
        'homePhone': json['homePhone'] == null ? undefined : json['homePhone'],
        'cellPhone': json['cellPhone'] == null ? undefined : json['cellPhone'],
        'faxNumber': json['faxNumber'] == null ? undefined : json['faxNumber'],
        'email': json['email'] == null ? undefined : json['email'],
        'expired': json['expired'] == null ? undefined : json['expired'],
        'trusted': json['trusted'] == null ? undefined : json['trusted'],
        'returnedMailDate': json['returnedMailDate'] == null ? undefined : (new Date(json['returnedMailDate'])),
        'comment': json['comment'] == null ? undefined : json['comment'],
    };
}

export function ClientLocationDtoToJSON(json: any): ClientLocationDto {
    return ClientLocationDtoToJSONTyped(json, false);
}

export function ClientLocationDtoToJSONTyped(value?: ClientLocationDto | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'clientNumber': value['clientNumber'],
        'locationCode': value['locationCode'],
        'locationName': value['locationName'],
        'companyCode': value['companyCode'],
        'address1': value['address1'],
        'address2': value['address2'],
        'address3': value['address3'],
        'city': value['city'],
        'province': value['province'],
        'postalCode': value['postalCode'],
        'country': value['country'],
        'businessPhone': value['businessPhone'],
        'homePhone': value['homePhone'],
        'cellPhone': value['cellPhone'],
        'faxNumber': value['faxNumber'],
        'email': value['email'],
        'expired': value['expired'],
        'trusted': value['trusted'],
        'returnedMailDate': value['returnedMailDate'] == null ? undefined : ((value['returnedMailDate']).toISOString().substring(0,10)),
        'comment': value['comment'],
    };
}

