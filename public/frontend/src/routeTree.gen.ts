/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ContactRouteImport } from './routes/contact'
import { Route as SplatRouteImport } from './routes/$'
import { Route as IndexRouteImport } from './routes/index'
import { Route as SearchIndexRouteImport } from './routes/search/index'
import { Route as SearchAZListRouteImport } from './routes/search/a-z-list'
import { Route as ResourceIdRouteImport } from './routes/resource/$id'
import { Route as ResourceIdIndexRouteImport } from './routes/resource/$id/index'
import { Route as ResourceIdContactRouteImport } from './routes/resource/$id/contact'

const ContactRoute = ContactRouteImport.update({
  id: '/contact',
  path: '/contact',
  getParentRoute: () => rootRouteImport,
} as any)
const SplatRoute = SplatRouteImport.update({
  id: '/$',
  path: '/$',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const SearchIndexRoute = SearchIndexRouteImport.update({
  id: '/search/',
  path: '/search/',
  getParentRoute: () => rootRouteImport,
} as any)
const SearchAZListRoute = SearchAZListRouteImport.update({
  id: '/search/a-z-list',
  path: '/search/a-z-list',
  getParentRoute: () => rootRouteImport,
} as any)
const ResourceIdRoute = ResourceIdRouteImport.update({
  id: '/resource/$id',
  path: '/resource/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const ResourceIdIndexRoute = ResourceIdIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ResourceIdRoute,
} as any)
const ResourceIdContactRoute = ResourceIdContactRouteImport.update({
  id: '/contact',
  path: '/contact',
  getParentRoute: () => ResourceIdRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/$': typeof SplatRoute
  '/contact': typeof ContactRoute
  '/resource/$id': typeof ResourceIdRouteWithChildren
  '/search/a-z-list': typeof SearchAZListRoute
  '/search': typeof SearchIndexRoute
  '/resource/$id/contact': typeof ResourceIdContactRoute
  '/resource/$id/': typeof ResourceIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/$': typeof SplatRoute
  '/contact': typeof ContactRoute
  '/search/a-z-list': typeof SearchAZListRoute
  '/search': typeof SearchIndexRoute
  '/resource/$id/contact': typeof ResourceIdContactRoute
  '/resource/$id': typeof ResourceIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/$': typeof SplatRoute
  '/contact': typeof ContactRoute
  '/resource/$id': typeof ResourceIdRouteWithChildren
  '/search/a-z-list': typeof SearchAZListRoute
  '/search/': typeof SearchIndexRoute
  '/resource/$id/contact': typeof ResourceIdContactRoute
  '/resource/$id/': typeof ResourceIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/$'
    | '/contact'
    | '/resource/$id'
    | '/search/a-z-list'
    | '/search'
    | '/resource/$id/contact'
    | '/resource/$id/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/$'
    | '/contact'
    | '/search/a-z-list'
    | '/search'
    | '/resource/$id/contact'
    | '/resource/$id'
  id:
    | '__root__'
    | '/'
    | '/$'
    | '/contact'
    | '/resource/$id'
    | '/search/a-z-list'
    | '/search/'
    | '/resource/$id/contact'
    | '/resource/$id/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  SplatRoute: typeof SplatRoute
  ContactRoute: typeof ContactRoute
  ResourceIdRoute: typeof ResourceIdRouteWithChildren
  SearchAZListRoute: typeof SearchAZListRoute
  SearchIndexRoute: typeof SearchIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/contact': {
      id: '/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof ContactRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/$': {
      id: '/$'
      path: '/$'
      fullPath: '/$'
      preLoaderRoute: typeof SplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/search/': {
      id: '/search/'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof SearchIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/search/a-z-list': {
      id: '/search/a-z-list'
      path: '/search/a-z-list'
      fullPath: '/search/a-z-list'
      preLoaderRoute: typeof SearchAZListRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/resource/$id': {
      id: '/resource/$id'
      path: '/resource/$id'
      fullPath: '/resource/$id'
      preLoaderRoute: typeof ResourceIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/resource/$id/': {
      id: '/resource/$id/'
      path: '/'
      fullPath: '/resource/$id/'
      preLoaderRoute: typeof ResourceIdIndexRouteImport
      parentRoute: typeof ResourceIdRoute
    }
    '/resource/$id/contact': {
      id: '/resource/$id/contact'
      path: '/contact'
      fullPath: '/resource/$id/contact'
      preLoaderRoute: typeof ResourceIdContactRouteImport
      parentRoute: typeof ResourceIdRoute
    }
  }
}

interface ResourceIdRouteChildren {
  ResourceIdContactRoute: typeof ResourceIdContactRoute
  ResourceIdIndexRoute: typeof ResourceIdIndexRoute
}

const ResourceIdRouteChildren: ResourceIdRouteChildren = {
  ResourceIdContactRoute: ResourceIdContactRoute,
  ResourceIdIndexRoute: ResourceIdIndexRoute,
}

const ResourceIdRouteWithChildren = ResourceIdRoute._addFileChildren(
  ResourceIdRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  SplatRoute: SplatRoute,
  ContactRoute: ContactRoute,
  ResourceIdRoute: ResourceIdRouteWithChildren,
  SearchAZListRoute: SearchAZListRoute,
  SearchIndexRoute: SearchIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
