/* tslint:disable */
/* eslint-disable */
/**
 * FSA Forest Client API
 * Forest Client API Application - Version 302
 *
 * The version of the OpenAPI document: 302
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Injectable, Optional } from '@nestjs/common';
import { HttpService } from '@nestjs/axios';
import { AxiosResponse } from 'axios';
import { Observable, from, of, switchMap } from 'rxjs';
import { ClientLocationDto } from '../model/clientLocationDto';
import { ClientPublicViewDto } from '../model/clientPublicViewDto';
import { Configuration } from '../configuration';
import { COLLECTION_FORMATS } from '../variables';

@Injectable()
export class ClientAPIService {
  protected basePath = process.env.FOREST_CLIENT_API_URL;
  public defaultHeaders: Record<string, string> = {};
  public configuration = new Configuration();
  protected httpClient: HttpService;

  constructor(
    httpClient: HttpService,
    @Optional() configuration: Configuration,
  ) {
    this.configuration = configuration || this.configuration;
    this.basePath = configuration?.basePath || this.basePath;
    this.httpClient = configuration?.httpClient || httpClient;
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = 'multipart/form-data';
    return consumes.includes(form);
  }

  /**
   * Search all non-individual client. It will return active and inactive
   *
   * @param xAPIKEY API Key used for authentication
   * @param page The one index page number, defaults to 0
   * @param size The amount of data to be returned per page, defaults to 10
   * @param sortedColumnName Column name to sort by, defaults to clientName
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public findAllNonIndividuals(
    xAPIKEY: string,
    page?: number,
    size?: number,
    sortedColumnName?: string,
  ): Observable<AxiosResponse<Array<ClientPublicViewDto>>>;
  public findAllNonIndividuals(
    xAPIKEY: string,
    page?: number,
    size?: number,
    sortedColumnName?: string,
  ): Observable<any> {
    if (xAPIKEY === null || xAPIKEY === undefined) {
      throw new Error(
        'Required parameter xAPIKEY was null or undefined when calling findAllNonIndividuals.',
      );
    }

    let queryParameters = new URLSearchParams();
    if (page !== undefined && page !== null) {
      queryParameters.append('page', <any>page);
    }
    if (size !== undefined && size !== null) {
      queryParameters.append('size', <any>size);
    }
    if (sortedColumnName !== undefined && sortedColumnName !== null) {
      queryParameters.append('sortedColumnName', <any>sortedColumnName);
    }

    let headers = { ...this.defaultHeaders };
    if (xAPIKEY !== undefined && xAPIKEY !== null) {
      headers['X-API-KEY'] = String(xAPIKEY);
    }

    let accessTokenObservable: Observable<any> = of(null);

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers['Accept'] = httpHeaderAcceptSelected;
    }

    // to determine the Content-Type header
    const consumes: string[] = [];
    return accessTokenObservable.pipe(
      switchMap((accessToken) => {
        if (accessToken) {
          headers['Authorization'] = `Bearer ${accessToken}`;
        }

        return this.httpClient.get<Array<ClientPublicViewDto>>(
          `${this.basePath}/api/clients/findAllNonIndividuals`,
          {
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
          },
        );
      }),
    );
  }
  /**
   * Search a client by it\&#39;s acronym. It will return active and inactive
   *
   * @param acronym The acronym to look for
   * @param xAPIKEY API Key used for authentication
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public findByAcronym(
    acronym: string,
    xAPIKEY: string,
  ): Observable<AxiosResponse<Array<ClientPublicViewDto>>>;
  public findByAcronym(acronym: string, xAPIKEY: string): Observable<any> {
    if (acronym === null || acronym === undefined) {
      throw new Error(
        'Required parameter acronym was null or undefined when calling findByAcronym.',
      );
    }

    if (xAPIKEY === null || xAPIKEY === undefined) {
      throw new Error(
        'Required parameter xAPIKEY was null or undefined when calling findByAcronym.',
      );
    }

    let queryParameters = new URLSearchParams();
    if (acronym !== undefined && acronym !== null) {
      queryParameters.append('acronym', <any>acronym);
    }

    let headers = { ...this.defaultHeaders };
    if (xAPIKEY !== undefined && xAPIKEY !== null) {
      headers['X-API-KEY'] = String(xAPIKEY);
    }

    let accessTokenObservable: Observable<any> = of(null);

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers['Accept'] = httpHeaderAcceptSelected;
    }

    // to determine the Content-Type header
    const consumes: string[] = [];
    return accessTokenObservable.pipe(
      switchMap((accessToken) => {
        if (accessToken) {
          headers['Authorization'] = `Bearer ${accessToken}`;
        }

        return this.httpClient.get<Array<ClientPublicViewDto>>(
          `${this.basePath}/api/clients/findByAcronym`,
          {
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
          },
        );
      }),
    );
  }
  /**
   * Search clients by client number. It will return active and inactive
   *
   * @param clientNumber The client number to look for
   * @param xAPIKEY API Key used for authentication
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public findByClientNumber(
    clientNumber: string,
    xAPIKEY: string,
  ): Observable<AxiosResponse<ClientPublicViewDto>>;
  public findByClientNumber(
    clientNumber: string,
    xAPIKEY: string,
  ): Observable<any> {
    if (clientNumber === null || clientNumber === undefined) {
      throw new Error(
        'Required parameter clientNumber was null or undefined when calling findByClientNumber.',
      );
    }

    if (xAPIKEY === null || xAPIKEY === undefined) {
      throw new Error(
        'Required parameter xAPIKEY was null or undefined when calling findByClientNumber.',
      );
    }

    let headers = { ...this.defaultHeaders };
    if (xAPIKEY !== undefined && xAPIKEY !== null) {
      headers['X-API-KEY'] = String(xAPIKEY);
    }

    let accessTokenObservable: Observable<any> = of(null);

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers['Accept'] = httpHeaderAcceptSelected;
    }

    // to determine the Content-Type header
    const consumes: string[] = [];
    return accessTokenObservable.pipe(
      switchMap((accessToken) => {
        if (accessToken) {
          headers['Authorization'] = `Bearer ${accessToken}`;
        }

        return this.httpClient.get<ClientPublicViewDto>(
          `${this.basePath}/api/clients/findByClientNumber/${encodeURIComponent(String(clientNumber))}`,
          {
            withCredentials: this.configuration.withCredentials,
            headers: headers,
          },
        );
      }),
    );
  }
  /**
   * Search clients by client number or client name. It will return active and inactive
   *
   * @param clientNumberOrName The client number to look for
   * @param xAPIKEY API Key used for authentication
   * @param page The one index page number, defaults to 0
   * @param size The amount of data to be returned per page, defaults to 10
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public findByClientNumberOrName(
    clientNumberOrName: string,
    xAPIKEY: string,
    page?: number,
    size?: number,
  ): Observable<AxiosResponse<ClientPublicViewDto>>;
  public findByClientNumberOrName(
    clientNumberOrName: string,
    xAPIKEY: string,
    page?: number,
    size?: number,
  ): Observable<any> {
    if (clientNumberOrName === null || clientNumberOrName === undefined) {
      throw new Error(
        'Required parameter clientNumberOrName was null or undefined when calling findByClientNumberOrName.',
      );
    }

    if (xAPIKEY === null || xAPIKEY === undefined) {
      throw new Error(
        'Required parameter xAPIKEY was null or undefined when calling findByClientNumberOrName.',
      );
    }

    let queryParameters = new URLSearchParams();
    if (page !== undefined && page !== null) {
      queryParameters.append('page', <any>page);
    }
    if (size !== undefined && size !== null) {
      queryParameters.append('size', <any>size);
    }

    let headers = { ...this.defaultHeaders };
    if (xAPIKEY !== undefined && xAPIKEY !== null) {
      headers['X-API-KEY'] = String(xAPIKEY);
    }

    let accessTokenObservable: Observable<any> = of(null);

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers['Accept'] = httpHeaderAcceptSelected;
    }

    // to determine the Content-Type header
    const consumes: string[] = [];
    return accessTokenObservable.pipe(
      switchMap((accessToken) => {
        if (accessToken) {
          headers['Authorization'] = `Bearer ${accessToken}`;
        }

        return this.httpClient.get<ClientPublicViewDto>(
          `${this.basePath}/api/clients/findByClientNumberOrName/${encodeURIComponent(String(clientNumberOrName))}`,
          {
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
          },
        );
      }),
    );
  }
  /**
   * Search a client by it\&#39;s name (including first, middle and last) and client type. It will return active and inactive
   *
   * @param xAPIKEY API Key used for authentication
   * @param page The one index page number, defaults to 0
   * @param size The amount of data to be returned per page, defaults to 10
   * @param clientName The name of the entity or individual\&#39;s last name
   * @param clientFirstName The client\&#39;s first name
   * @param clientMiddleName The client\&#39;s middle name
   * @param clientTypeCodes The type of client, can be any of the following:&lt;br&gt;  A (Association),&lt;br&gt; B (First Nation Band),&lt;br&gt; C (Corporation),&lt;br&gt; F (Ministry of Forests and Range),&lt;br&gt; G (Government),&lt;br&gt; I (Individual),&lt;br&gt; L (Limited Partnership),&lt;br&gt; P (General Partnership),&lt;br&gt; R (First Nation Group),&lt;br&gt; S (Society),&lt;br&gt; T (First Nation Tribal Council),&lt;br&gt; U (Unregistered Company),&lt;br&gt; Z (Sole Proprietorship)
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public findByNames(
    xAPIKEY: string,
    page?: number,
    size?: number,
    clientName?: string,
    clientFirstName?: string,
    clientMiddleName?: string,
    clientTypeCodes?: Array<string>,
  ): Observable<AxiosResponse<Array<ClientPublicViewDto>>>;
  public findByNames(
    xAPIKEY: string,
    page?: number,
    size?: number,
    clientName?: string,
    clientFirstName?: string,
    clientMiddleName?: string,
    clientTypeCodes?: Array<string>,
  ): Observable<any> {
    if (xAPIKEY === null || xAPIKEY === undefined) {
      throw new Error(
        'Required parameter xAPIKEY was null or undefined when calling findByNames.',
      );
    }

    let queryParameters = new URLSearchParams();
    if (page !== undefined && page !== null) {
      queryParameters.append('page', <any>page);
    }
    if (size !== undefined && size !== null) {
      queryParameters.append('size', <any>size);
    }
    if (clientName !== undefined && clientName !== null) {
      queryParameters.append('clientName', <any>clientName);
    }
    if (clientFirstName !== undefined && clientFirstName !== null) {
      queryParameters.append('clientFirstName', <any>clientFirstName);
    }
    if (clientMiddleName !== undefined && clientMiddleName !== null) {
      queryParameters.append('clientMiddleName', <any>clientMiddleName);
    }
    if (clientTypeCodes) {
      clientTypeCodes.forEach((element) => {
        queryParameters.append('clientTypeCodes', <any>element);
      });
    }

    let headers = { ...this.defaultHeaders };
    if (xAPIKEY !== undefined && xAPIKEY !== null) {
      headers['X-API-KEY'] = String(xAPIKEY);
    }

    let accessTokenObservable: Observable<any> = of(null);

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers['Accept'] = httpHeaderAcceptSelected;
    }

    // to determine the Content-Type header
    const consumes: string[] = [];
    return accessTokenObservable.pipe(
      switchMap((accessToken) => {
        if (accessToken) {
          headers['Authorization'] = `Bearer ${accessToken}`;
        }

        return this.httpClient.get<Array<ClientPublicViewDto>>(
          `${this.basePath}/api/clients/findByNames`,
          {
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
          },
        );
      }),
    );
  }
  /**
   * Get the client location based on client number and location id
   *
   * @param clientNumber ID of the client to filter by
   * @param locationNumber ID of the client location to filter by
   * @param xAPIKEY API Key used for authentication
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getClientLocationDetails(
    clientNumber: string,
    locationNumber: string,
    xAPIKEY: string,
  ): Observable<AxiosResponse<ClientLocationDto>>;
  public getClientLocationDetails(
    clientNumber: string,
    locationNumber: string,
    xAPIKEY: string,
  ): Observable<any> {
    if (clientNumber === null || clientNumber === undefined) {
      throw new Error(
        'Required parameter clientNumber was null or undefined when calling getClientLocationDetails.',
      );
    }

    if (locationNumber === null || locationNumber === undefined) {
      throw new Error(
        'Required parameter locationNumber was null or undefined when calling getClientLocationDetails.',
      );
    }

    if (xAPIKEY === null || xAPIKEY === undefined) {
      throw new Error(
        'Required parameter xAPIKEY was null or undefined when calling getClientLocationDetails.',
      );
    }

    let headers = { ...this.defaultHeaders };
    if (xAPIKEY !== undefined && xAPIKEY !== null) {
      headers['X-API-KEY'] = String(xAPIKEY);
    }

    let accessTokenObservable: Observable<any> = of(null);

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers['Accept'] = httpHeaderAcceptSelected;
    }

    // to determine the Content-Type header
    const consumes: string[] = [];
    return accessTokenObservable.pipe(
      switchMap((accessToken) => {
        if (accessToken) {
          headers['Authorization'] = `Bearer ${accessToken}`;
        }

        return this.httpClient.get<ClientLocationDto>(
          `${this.basePath}/api/clients/${encodeURIComponent(String(clientNumber))}/locations/${encodeURIComponent(String(locationNumber))}`,
          {
            withCredentials: this.configuration.withCredentials,
            headers: headers,
          },
        );
      }),
    );
  }
  /**
   * Search for client location based on client number
   *
   * @param clientNumber ID of the client to filter by
   * @param xAPIKEY API Key used for authentication
   * @param page The one index page number, defaults to 0
   * @param size The amount of data to be returned per page, defaults to 10
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public listClientLocations(
    clientNumber: string,
    xAPIKEY: string,
    page?: number,
    size?: number,
  ): Observable<AxiosResponse<Array<ClientLocationDto>>>;
  public listClientLocations(
    clientNumber: string,
    xAPIKEY: string,
    page?: number,
    size?: number,
  ): Observable<any> {
    if (clientNumber === null || clientNumber === undefined) {
      throw new Error(
        'Required parameter clientNumber was null or undefined when calling listClientLocations.',
      );
    }

    if (xAPIKEY === null || xAPIKEY === undefined) {
      throw new Error(
        'Required parameter xAPIKEY was null or undefined when calling listClientLocations.',
      );
    }

    let queryParameters = new URLSearchParams();
    if (page !== undefined && page !== null) {
      queryParameters.append('page', <any>page);
    }
    if (size !== undefined && size !== null) {
      queryParameters.append('size', <any>size);
    }

    let headers = { ...this.defaultHeaders };
    if (xAPIKEY !== undefined && xAPIKEY !== null) {
      headers['X-API-KEY'] = String(xAPIKEY);
    }

    let accessTokenObservable: Observable<any> = of(null);

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers['Accept'] = httpHeaderAcceptSelected;
    }

    // to determine the Content-Type header
    const consumes: string[] = [];
    return accessTokenObservable.pipe(
      switchMap((accessToken) => {
        if (accessToken) {
          headers['Authorization'] = `Bearer ${accessToken}`;
        }

        return this.httpClient.get<Array<ClientLocationDto>>(
          `${this.basePath}/api/clients/${encodeURIComponent(String(clientNumber))}/locations`,
          {
            params: queryParameters,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
          },
        );
      }),
    );
  }
}
