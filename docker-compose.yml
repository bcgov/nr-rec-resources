# Reusable vars
x-var:
  - &POSTGRES_USER postgres
  - &POSTGRES_PASSWORD default
  - &POSTGRES_DATABASE postgres

# Reusable envars for postgres
x-postgres-vars: &postgres-vars
  POSTGRES_HOST: database
  POSTGRES_USER: *POSTGRES_USER
  POSTGRES_PASSWORD: *POSTGRES_PASSWORD
  POSTGRES_DATABASE: *POSTGRES_DATABASE

services:
  database:
    image: postgis/postgis:16-3.4@sha256:44126d872ac91993766c341e369c539e8196614321765d36a6f1bab0419a5fa5
    container_name: database
    environment:
      <<: *postgres-vars
    healthcheck:
      test: ["CMD", "pg_isready", "-U", *POSTGRES_USER]
    ports: ["5432:5432"]

  migrations:
    image: ${FLYWAY_IMAGE:-flyway/flyway:10-alpine@sha256:94a81ca7db9a9f24fd8acd7463fa4560cb8f66aae2aa64485c27eb296f5851cf}
    container_name: migrations
    command: info migrate info
    volumes: ["./migrations/rst/sql:/flyway/sql:ro"]
    environment:
      FLYWAY_URL: jdbc:postgresql://database:5432/postgres
      FLYWAY_USER: *POSTGRES_USER
      FLYWAY_PASSWORD: *POSTGRES_PASSWORD
      FLYWAY_BASELINE_ON_MIGRATE: true
      FLYWAY_DEFAULT_SCHEMA: rst
    depends_on:
      database:
        condition: service_healthy

  fixtures:
    image: ${FLYWAY_FIXTURES_IMAGE:-flyway/flyway:10-alpine@sha256:94a81ca7db9a9f24fd8acd7463fa4560cb8f66aae2aa64485c27eb296f5851cf}
    container_name: fixtures
    command: info migrate info
    volumes: ["./migrations/fixtures/sql:/flyway/sql:ro"]
    environment:
      FLYWAY_URL: jdbc:postgresql://database:5432/postgres
      FLYWAY_USER: *POSTGRES_USER
      FLYWAY_PASSWORD: *POSTGRES_PASSWORD
      FLYWAY_BASELINE_ON_MIGRATE: true
      FLYWAY_DEFAULT_SCHEMA: migration # needs a separate migration schema or it will fail
    depends_on:
      migrations:
        condition: service_completed_successfully

  schemaspy:
    image: schemaspy/schemaspy:6.2.4@sha256:08290ff34c0fa4c1b28af555fbedf755159e42d02651a987e6077cb40a06f1ff
    profiles: ["schemaspy"]
    container_name: schemaspy
    command:
      -t pgsql11 -db postgres -host database -port 5432 -u postgres -p default
      -schemas rst
    depends_on:
      migrations:
        condition: service_completed_successfully
    volumes: ["./output:/output"]

  backend:
    container_name: backend
    depends_on:
      migrations:
        condition: service_completed_successfully
    environment:
      <<: *postgres-vars
      NODE_ENV: development
      PORT: 8000
    image: ${BACKEND_IMAGE:-backend}
    build:
      context: ./backend
    ports: ["8000:8000"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api"]
    working_dir: "/app"

  frontend:
    container_name: frontend
    build:
      context: ./frontend
    environment:
      BACKEND_URL: http://backend:8000
      PORT: 3000
      NODE_ENV: development
      LOG_LEVEL: debug
    image: ${FRONTEND_IMAGE:-frontend}
    ports: ["3000:3000"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
    working_dir: "/app"
    depends_on:
      backend:
        condition: service_started
