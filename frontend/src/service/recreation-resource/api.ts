/* tslint:disable */
/* eslint-disable */
/**
 * Recreation Sites and Trails BC API
 * RST API documentation
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from './base';

/**
 *
 * @export
 * @interface FilterDto
 */
export interface FilterDto {
  /**
   *
   * @type {string}
   * @memberof FilterDto
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof FilterDto
   */
  label: string;
  /**
   *
   * @type {string}
   * @memberof FilterDto
   */
  param: string;
  /**
   *
   * @type {Array<FilterOptionDto>}
   * @memberof FilterDto
   */
  options: Array<FilterOptionDto>;
}
/**
 *
 * @export
 * @interface FilterOptionDto
 */
export interface FilterOptionDto {
  /**
   * Unique identifier for the filter option
   * @type {number}
   * @memberof FilterOptionDto
   */
  id: number;
  /**
   * Number of matching results for this filter
   * @type {number}
   * @memberof FilterOptionDto
   */
  count: number;
  /**
   * Human-readable display text for the filter option
   * @type {string}
   * @memberof FilterOptionDto
   */
  description: string;
}
/**
 *
 * @export
 * @interface HealthControllerCheck200Response
 */
export interface HealthControllerCheck200Response {
  /**
   *
   * @type {string}
   * @memberof HealthControllerCheck200Response
   */
  status?: string;
  /**
   *
   * @type {{ [key: string]: HealthControllerCheck200ResponseInfoValue; }}
   * @memberof HealthControllerCheck200Response
   */
  info?: { [key: string]: HealthControllerCheck200ResponseInfoValue } | null;
  /**
   *
   * @type {{ [key: string]: HealthControllerCheck200ResponseInfoValue; }}
   * @memberof HealthControllerCheck200Response
   */
  error?: { [key: string]: HealthControllerCheck200ResponseInfoValue } | null;
  /**
   *
   * @type {{ [key: string]: HealthControllerCheck200ResponseInfoValue; }}
   * @memberof HealthControllerCheck200Response
   */
  details?: { [key: string]: HealthControllerCheck200ResponseInfoValue };
}
/**
 *
 * @export
 * @interface HealthControllerCheck200ResponseInfoValue
 */
export interface HealthControllerCheck200ResponseInfoValue {
  [key: string]: any;

  /**
   *
   * @type {string}
   * @memberof HealthControllerCheck200ResponseInfoValue
   */
  status: string;
}
/**
 *
 * @export
 * @interface HealthControllerCheck503Response
 */
export interface HealthControllerCheck503Response {
  /**
   *
   * @type {string}
   * @memberof HealthControllerCheck503Response
   */
  status?: string;
  /**
   *
   * @type {{ [key: string]: HealthControllerCheck200ResponseInfoValue; }}
   * @memberof HealthControllerCheck503Response
   */
  info?: { [key: string]: HealthControllerCheck200ResponseInfoValue } | null;
  /**
   *
   * @type {{ [key: string]: HealthControllerCheck200ResponseInfoValue; }}
   * @memberof HealthControllerCheck503Response
   */
  error?: { [key: string]: HealthControllerCheck200ResponseInfoValue } | null;
  /**
   *
   * @type {{ [key: string]: HealthControllerCheck200ResponseInfoValue; }}
   * @memberof HealthControllerCheck503Response
   */
  details?: { [key: string]: HealthControllerCheck200ResponseInfoValue };
}
/**
 *
 * @export
 * @interface PaginatedRecreationResourceDto
 */
export interface PaginatedRecreationResourceDto {
  /**
   *
   * @type {Array<RecreationResourceDto>}
   * @memberof PaginatedRecreationResourceDto
   */
  data: Array<RecreationResourceDto>;
  /**
   *
   * @type {number}
   * @memberof PaginatedRecreationResourceDto
   */
  total: number;
  /**
   *
   * @type {number}
   * @memberof PaginatedRecreationResourceDto
   */
  page: number;
  /**
   *
   * @type {number}
   * @memberof PaginatedRecreationResourceDto
   */
  limit: number;
  /**
   *
   * @type {Array<FilterDto>}
   * @memberof PaginatedRecreationResourceDto
   */
  filters: Array<FilterDto>;
}
/**
 *
 * @export
 * @interface RecreationActivityDto
 */
export interface RecreationActivityDto {
  /**
   * Unique code identifying the recreation activity
   * @type {number}
   * @memberof RecreationActivityDto
   */
  recreation_activity_code: number;
  /**
   * Detailed description of the activity
   * @type {string}
   * @memberof RecreationActivityDto
   */
  description: string;
}
/**
 *
 * @export
 * @interface RecreationResourceDto
 */
export interface RecreationResourceDto {
  /**
   * Unique identifier of the Recreation Resource
   * @type {string}
   * @memberof RecreationResourceDto
   */
  rec_resource_id: string;
  /**
   * Official name of the Recreation Resource
   * @type {string}
   * @memberof RecreationResourceDto
   */
  name: string;
  /**
   * Detailed description of the Recreation Resource
   * @type {string}
   * @memberof RecreationResourceDto
   */
  description: string | null;
  /**
   * Physical location of the Recreation Resource
   * @type {string}
   * @memberof RecreationResourceDto
   */
  closest_community: string;
  /**
   * List of recreational activities available at this resource
   * @type {Array<RecreationActivityDto>}
   * @memberof RecreationResourceDto
   */
  recreation_activity: Array<RecreationActivityDto>;
  /**
   * Current operational status of the Recreation Resource
   * @type {RecreationStatusDto}
   * @memberof RecreationResourceDto
   */
  recreation_status: RecreationStatusDto;
}
/**
 *
 * @export
 * @interface RecreationStatusDto
 */
export interface RecreationStatusDto {
  /**
   * Status code of the resource
   * @type {number}
   * @memberof RecreationStatusDto
   */
  status_code: number;
  /**
   * Additional status information
   * @type {string}
   * @memberof RecreationStatusDto
   */
  comment: string | null;
  /**
   * Detailed status description
   * @type {string}
   * @memberof RecreationStatusDto
   */
  description: string;
}

/**
 * AppApi - axios parameter creator
 * @export
 */
export const AppApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    appControllerGetHello: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * AppApi - functional programming interface
 * @export
 */
export const AppApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AppApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async appControllerGetHello(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.appControllerGetHello(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['AppApi.appControllerGetHello']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * AppApi - factory interface
 * @export
 */
export const AppApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = AppApiFp(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    appControllerGetHello(options?: RawAxiosRequestConfig): AxiosPromise<void> {
      return localVarFp
        .appControllerGetHello(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * AppApi - object-oriented interface
 * @export
 * @class AppApi
 * @extends {BaseAPI}
 */
export class AppApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AppApi
   */
  public appControllerGetHello(options?: RawAxiosRequestConfig) {
    return AppApiFp(this.configuration)
      .appControllerGetHello(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * HealthApi - axios parameter creator
 * @export
 */
export const HealthApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    healthControllerCheck: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/health`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * HealthApi - functional programming interface
 * @export
 */
export const HealthApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = HealthApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async healthControllerCheck(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<HealthControllerCheck200Response>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.healthControllerCheck(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['HealthApi.healthControllerCheck']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * HealthApi - factory interface
 * @export
 */
export const HealthApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = HealthApiFp(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    healthControllerCheck(
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<HealthControllerCheck200Response> {
      return localVarFp
        .healthControllerCheck(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * HealthApi - object-oriented interface
 * @export
 * @class HealthApi
 * @extends {BaseAPI}
 */
export class HealthApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HealthApi
   */
  public healthControllerCheck(options?: RawAxiosRequestConfig) {
    return HealthApiFp(this.configuration)
      .healthControllerCheck(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * MetricsApi - axios parameter creator
 * @export
 */
export const MetricsApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    metricsControllerGetMetrics: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/metrics`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * MetricsApi - functional programming interface
 * @export
 */
export const MetricsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = MetricsApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async metricsControllerGetMetrics(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.metricsControllerGetMetrics(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['MetricsApi.metricsControllerGetMetrics']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * MetricsApi - factory interface
 * @export
 */
export const MetricsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = MetricsApiFp(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    metricsControllerGetMetrics(
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .metricsControllerGetMetrics(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * MetricsApi - object-oriented interface
 * @export
 * @class MetricsApi
 * @extends {BaseAPI}
 */
export class MetricsApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MetricsApi
   */
  public metricsControllerGetMetrics(options?: RawAxiosRequestConfig) {
    return MetricsApiFp(this.configuration)
      .metricsControllerGetMetrics(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * RecreationResourceApi - axios parameter creator
 * @export
 */
export const RecreationResourceApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary Find recreation resource by ID
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRecreationResourceById: async (
      id: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('getRecreationResourceById', 'id', id);
      const localVarPath = `/api/v1/recreation-resource/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Search recreation resources
     * @param {string} [filter] Search filter
     * @param {number} [limit] Number of items per page
     * @param {number} [page] Page number
     * @param {string} [activities] Recreation activities
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchRecreationResources: async (
      filter?: string,
      limit?: number,
      page?: number,
      activities?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/recreation-resource/search`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (filter !== undefined) {
        localVarQueryParameter['filter'] = filter;
      }

      if (limit !== undefined) {
        localVarQueryParameter['limit'] = limit;
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page;
      }

      if (activities !== undefined) {
        localVarQueryParameter['activities'] = activities;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * RecreationResourceApi - functional programming interface
 * @export
 */
export const RecreationResourceApiFp = function (
  configuration?: Configuration,
) {
  const localVarAxiosParamCreator =
    RecreationResourceApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Find recreation resource by ID
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getRecreationResourceById(
      id: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<RecreationResourceDto>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getRecreationResourceById(id, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['RecreationResourceApi.getRecreationResourceById']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary Search recreation resources
     * @param {string} [filter] Search filter
     * @param {number} [limit] Number of items per page
     * @param {number} [page] Page number
     * @param {string} [activities] Recreation activities
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async searchRecreationResources(
      filter?: string,
      limit?: number,
      page?: number,
      activities?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<PaginatedRecreationResourceDto>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.searchRecreationResources(
          filter,
          limit,
          page,
          activities,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['RecreationResourceApi.searchRecreationResources']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * RecreationResourceApi - factory interface
 * @export
 */
export const RecreationResourceApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = RecreationResourceApiFp(configuration);
  return {
    /**
     *
     * @summary Find recreation resource by ID
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRecreationResourceById(
      id: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<RecreationResourceDto> {
      return localVarFp
        .getRecreationResourceById(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Search recreation resources
     * @param {string} [filter] Search filter
     * @param {number} [limit] Number of items per page
     * @param {number} [page] Page number
     * @param {string} [activities] Recreation activities
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchRecreationResources(
      filter?: string,
      limit?: number,
      page?: number,
      activities?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<PaginatedRecreationResourceDto> {
      return localVarFp
        .searchRecreationResources(filter, limit, page, activities, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * RecreationResourceApi - object-oriented interface
 * @export
 * @class RecreationResourceApi
 * @extends {BaseAPI}
 */
export class RecreationResourceApi extends BaseAPI {
  /**
   *
   * @summary Find recreation resource by ID
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RecreationResourceApi
   */
  public getRecreationResourceById(
    id: string,
    options?: RawAxiosRequestConfig,
  ) {
    return RecreationResourceApiFp(this.configuration)
      .getRecreationResourceById(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Search recreation resources
   * @param {string} [filter] Search filter
   * @param {number} [limit] Number of items per page
   * @param {number} [page] Page number
   * @param {string} [activities] Recreation activities
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RecreationResourceApi
   */
  public searchRecreationResources(
    filter?: string,
    limit?: number,
    page?: number,
    activities?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return RecreationResourceApiFp(this.configuration)
      .searchRecreationResources(filter, limit, page, activities, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
