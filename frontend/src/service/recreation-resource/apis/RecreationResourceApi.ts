/* tslint:disable */
/* eslint-disable */
/**
 * Recreation Sites and Trails BC API
 * RST API documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PaginatedRecreationResourceDto,
  RecreationResourceDetailDto,
  SiteOperatorDto,
} from '../models/index';
import {
    PaginatedRecreationResourceDtoFromJSON,
    PaginatedRecreationResourceDtoToJSON,
    RecreationResourceDetailDtoFromJSON,
    RecreationResourceDetailDtoToJSON,
    SiteOperatorDtoFromJSON,
    SiteOperatorDtoToJSON,
} from '../models/index';

export interface GetRecreationResourceByIdRequest {
    id: string;
    imageSizeCodes?: Array<GetRecreationResourceByIdImageSizeCodesEnum>;
}

export interface GetSiteOperatorByIdRequest {
    id: string;
}

export interface SearchRecreationResourcesRequest {
    filter?: string;
    limit?: number;
    page?: number;
    activities?: string;
    type?: string;
    district?: string;
    access?: string;
    facilities?: string;
}

/**
 * 
 */
export class RecreationResourceApi extends runtime.BaseAPI {

    /**
     * Find recreation resource by ID
     */
    async getRecreationResourceByIdRaw(requestParameters: GetRecreationResourceByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RecreationResourceDetailDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getRecreationResourceById().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['imageSizeCodes'] != null) {
            queryParameters['imageSizeCodes'] = requestParameters['imageSizeCodes'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/recreation-resource/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RecreationResourceDetailDtoFromJSON(jsonValue));
    }

    /**
     * Find recreation resource by ID
     */
    async getRecreationResourceById(requestParameters: GetRecreationResourceByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RecreationResourceDetailDto> {
        const response = await this.getRecreationResourceByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Find site operator by resource ID
     */
    async getSiteOperatorByIdRaw(requestParameters: GetSiteOperatorByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SiteOperatorDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getSiteOperatorById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/recreation-resource/{id}/site-operator`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SiteOperatorDtoFromJSON(jsonValue));
    }

    /**
     * Find site operator by resource ID
     */
    async getSiteOperatorById(requestParameters: GetSiteOperatorByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SiteOperatorDto> {
        const response = await this.getSiteOperatorByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search recreation resources
     */
    async searchRecreationResourcesRaw(requestParameters: SearchRecreationResourcesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedRecreationResourceDto>> {
        const queryParameters: any = {};

        if (requestParameters['filter'] != null) {
            queryParameters['filter'] = requestParameters['filter'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['activities'] != null) {
            queryParameters['activities'] = requestParameters['activities'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        if (requestParameters['district'] != null) {
            queryParameters['district'] = requestParameters['district'];
        }

        if (requestParameters['access'] != null) {
            queryParameters['access'] = requestParameters['access'];
        }

        if (requestParameters['facilities'] != null) {
            queryParameters['facilities'] = requestParameters['facilities'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/recreation-resource/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedRecreationResourceDtoFromJSON(jsonValue));
    }

    /**
     * Search recreation resources
     */
    async searchRecreationResources(requestParameters: SearchRecreationResourcesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedRecreationResourceDto> {
        const response = await this.searchRecreationResourcesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetRecreationResourceByIdImageSizeCodesEnum = {
    Original: 'original',
    Col: 'col',
    Con: 'con',
    Pcs: 'pcs',
    Hpr: 'hpr',
    Ili: 'ili',
    Lan: 'lan',
    Llc: 'llc',
    Lpr: 'lpr',
    Gal: 'gal',
    Ppp: 'ppp',
    Pre: 'pre',
    Rsr: 'rsr',
    Rth: 'rth',
    Scr: 'scr',
    Thm: 'thm'
} as const;
export type GetRecreationResourceByIdImageSizeCodesEnum = typeof GetRecreationResourceByIdImageSizeCodesEnum[keyof typeof GetRecreationResourceByIdImageSizeCodesEnum];
