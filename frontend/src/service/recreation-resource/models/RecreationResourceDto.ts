/* tslint:disable */
/* eslint-disable */
/**
 * Recreation Sites and Trails BC API
 * RST API documentation
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { RecreationStatusDto } from './RecreationStatusDto';
import {
  RecreationStatusDtoFromJSON,
  RecreationStatusDtoFromJSONTyped,
  RecreationStatusDtoToJSON,
  RecreationStatusDtoToJSONTyped,
} from './RecreationStatusDto';
import type { RecreationActivityDto } from './RecreationActivityDto';
import {
  RecreationActivityDtoFromJSON,
  RecreationActivityDtoFromJSONTyped,
  RecreationActivityDtoToJSON,
  RecreationActivityDtoToJSONTyped,
} from './RecreationActivityDto';

/**
 *
 * @export
 * @interface RecreationResourceDto
 */
export interface RecreationResourceDto {
  /**
   * Unique identifier of the Recreation Resource
   * @type {string}
   * @memberof RecreationResourceDto
   */
  rec_resource_id: string;
  /**
   * Official name of the Recreation Resource
   * @type {string}
   * @memberof RecreationResourceDto
   */
  name: string;
  /**
   * Detailed description of the Recreation Resource
   * @type {string}
   * @memberof RecreationResourceDto
   */
  description: string | null;
  /**
   * Physical location of the Recreation Resource
   * @type {string}
   * @memberof RecreationResourceDto
   */
  closest_community: string;
  /**
   * List of recreational activities available at this resource
   * @type {Array<RecreationActivityDto>}
   * @memberof RecreationResourceDto
   */
  recreation_activity: Array<RecreationActivityDto>;
  /**
   * Current operational status of the Recreation Resource
   * @type {RecreationStatusDto}
   * @memberof RecreationResourceDto
   */
  recreation_status: RecreationStatusDto;
  /**
   * Code representing a specific feature associated with the recreation resource
   * @type {string}
   * @memberof RecreationResourceDto
   */
  rec_resource_type: string;

  campsite_count: number;

  recreation_fee: RecreationFeeDto;
}

export interface RecreationFeeDto {
  /**
   * Amount charged for the recreation resource
   * @type {number}
   * @memberof RecreationFeeDto
   */
  fee_amount: number;

  /**
   * Start date for the fee applicability
   * @type {Date}
   * @memberof RecreationFeeDto
   */
  fee_start_date: Date;

  /**
   * End date for the fee applicability
   * @type {Date}
   * @memberof RecreationFeeDto
   */
  fee_end_date: Date;

  /**
   * Type of fee applicable (from recreation_fee_code)
   * @type {number}
   * @memberof RecreationFeeDto
   */
  recreation_fee_code: number;

  /**
   * Description of the fee type
   * @type {string}
   * @memberof RecreationFeeDto
   */
  fee_description: string;

  /**
   * Indicates if the fee applies on Monday
   * @type {string}
   * @memberof RecreationFeeDto
   */
  monday_ind: string;

  /**
   * Indicates if the fee applies on Tuesday
   * @type {string}
   * @memberof RecreationFeeDto
   */
  tuesday_ind: string;

  /**
   * Indicates if the fee applies on Wednesday
   * @type {string}
   * @memberof RecreationFeeDto
   */
  wednesday_ind: string;

  /**
   * Indicates if the fee applies on Thursday
   * @type {string}
   * @memberof RecreationFeeDto
   */
  thursday_ind: string;

  /**
   * Indicates if the fee applies on Friday
   * @type {string}
   * @memberof RecreationFeeDto
   */
  friday_ind: string;

  /**
   * Indicates if the fee applies on Saturday
   * @type {string}
   * @memberof RecreationFeeDto
   */
  saturday_ind: string;

  /**
   * Indicates if the fee applies on Sunday
   * @type {string}
   * @memberof RecreationFeeDto
   */
  sunday_ind: string;
}

/**
 * Check if a given object implements the RecreationResourceDto interface.
 */
export function instanceOfRecreationResourceDto(
  value: object,
): value is RecreationResourceDto {
  if (!('rec_resource_id' in value) || value['rec_resource_id'] === undefined)
    return false;
  if (!('name' in value) || value['name'] === undefined) return false;
  if (!('description' in value) || value['description'] === undefined)
    return false;
  if (
    !('closest_community' in value) ||
    value['closest_community'] === undefined
  )
    return false;
  if (
    !('recreation_activity' in value) ||
    value['recreation_activity'] === undefined
  )
    return false;
  if (
    !('recreation_status' in value) ||
    value['recreation_status'] === undefined
  )
    return false;
  if (
    !('rec_resource_type' in value) ||
    value['rec_resource_type'] === undefined
  )
    return false;
  return true;
}

export function RecreationResourceDtoFromJSON(
  json: any,
): RecreationResourceDto {
  return RecreationResourceDtoFromJSONTyped(json, false);
}

export function RecreationResourceDtoFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): RecreationResourceDto {
  if (json == null) {
    return json;
  }
  return {
    rec_resource_id: json['rec_resource_id'],
    name: json['name'],
    description: json['description'],
    closest_community: json['closest_community'],
    recreation_activity: (json['recreation_activity'] as Array<any>).map(
      RecreationActivityDtoFromJSON,
    ),
    recreation_status: RecreationStatusDtoFromJSON(json['recreation_status']),
    rec_resource_type: json['rec_resource_type'],
    campsite_count: json['campsite_count'],
    recreation_fee: json['recreation_fee'],
  };
}

export function RecreationResourceDtoToJSON(json: any): RecreationResourceDto {
  return RecreationResourceDtoToJSONTyped(json, false);
}

export function RecreationResourceDtoToJSONTyped(
  value?: RecreationResourceDto | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    rec_resource_id: value['rec_resource_id'],
    name: value['name'],
    description: value['description'],
    closest_community: value['closest_community'],
    recreation_activity: (value['recreation_activity'] as Array<any>).map(
      RecreationActivityDtoToJSON,
    ),
    recreation_status: RecreationStatusDtoToJSON(value['recreation_status']),
    rec_resource_type: value['rec_resource_type'],
  };
}
