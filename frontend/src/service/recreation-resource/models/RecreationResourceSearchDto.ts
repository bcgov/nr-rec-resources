/* tslint:disable */
/* eslint-disable */
/**
 * Recreation Sites and Trails BC API
 * RST API documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { RecreationResourceImageDto } from './RecreationResourceImageDto';
import {
    RecreationResourceImageDtoFromJSON,
    RecreationResourceImageDtoFromJSONTyped,
    RecreationResourceImageDtoToJSON,
    RecreationResourceImageDtoToJSONTyped,
} from './RecreationResourceImageDto';
import type { RecreationStatusDto } from './RecreationStatusDto';
import {
    RecreationStatusDtoFromJSON,
    RecreationStatusDtoFromJSONTyped,
    RecreationStatusDtoToJSON,
    RecreationStatusDtoToJSONTyped,
} from './RecreationStatusDto';
import type { RecreationActivityDto } from './RecreationActivityDto';
import {
    RecreationActivityDtoFromJSON,
    RecreationActivityDtoFromJSONTyped,
    RecreationActivityDtoToJSON,
    RecreationActivityDtoToJSONTyped,
} from './RecreationActivityDto';

/**
 * 
 * @export
 * @interface RecreationResourceSearchDto
 */
export interface RecreationResourceSearchDto {
    /**
     * Unique identifier of the Recreation Resource
     * @type {string}
     * @memberof RecreationResourceSearchDto
     */
    rec_resource_id: string;
    /**
     * Official name of the Recreation Resource
     * @type {string}
     * @memberof RecreationResourceSearchDto
     */
    name: string;
    /**
     * Physical location of the Recreation Resource
     * @type {string}
     * @memberof RecreationResourceSearchDto
     */
    closest_community: string;
    /**
     * List of recreational activities available at this resource
     * @type {Array<RecreationActivityDto>}
     * @memberof RecreationResourceSearchDto
     */
    recreation_activity: Array<RecreationActivityDto>;
    /**
     * Current operational status of the Recreation Resource
     * @type {RecreationStatusDto}
     * @memberof RecreationResourceSearchDto
     */
    recreation_status: RecreationStatusDto;
    /**
     * Code representing a specific feature associated with the recreation resource
     * @type {string}
     * @memberof RecreationResourceSearchDto
     */
    rec_resource_type: string;
    /**
     * List of images for the recreation resource
     * @type {Array<RecreationResourceImageDto>}
     * @memberof RecreationResourceSearchDto
     */
    recreation_resource_images?: Array<RecreationResourceImageDto>;
}

/**
 * Check if a given object implements the RecreationResourceSearchDto interface.
 */
export function instanceOfRecreationResourceSearchDto(value: object): value is RecreationResourceSearchDto {
    if (!('rec_resource_id' in value) || value['rec_resource_id'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('closest_community' in value) || value['closest_community'] === undefined) return false;
    if (!('recreation_activity' in value) || value['recreation_activity'] === undefined) return false;
    if (!('recreation_status' in value) || value['recreation_status'] === undefined) return false;
    if (!('rec_resource_type' in value) || value['rec_resource_type'] === undefined) return false;
    return true;
}

export function RecreationResourceSearchDtoFromJSON(json: any): RecreationResourceSearchDto {
    return RecreationResourceSearchDtoFromJSONTyped(json, false);
}

export function RecreationResourceSearchDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): RecreationResourceSearchDto {
    if (json == null) {
        return json;
    }
    return {
        
        'rec_resource_id': json['rec_resource_id'],
        'name': json['name'],
        'closest_community': json['closest_community'],
        'recreation_activity': ((json['recreation_activity'] as Array<any>).map(RecreationActivityDtoFromJSON)),
        'recreation_status': RecreationStatusDtoFromJSON(json['recreation_status']),
        'rec_resource_type': json['rec_resource_type'],
        'recreation_resource_images': json['recreation_resource_images'] == null ? undefined : ((json['recreation_resource_images'] as Array<any>).map(RecreationResourceImageDtoFromJSON)),
    };
}

export function RecreationResourceSearchDtoToJSON(json: any): RecreationResourceSearchDto {
    return RecreationResourceSearchDtoToJSONTyped(json, false);
}

export function RecreationResourceSearchDtoToJSONTyped(value?: RecreationResourceSearchDto | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'rec_resource_id': value['rec_resource_id'],
        'name': value['name'],
        'closest_community': value['closest_community'],
        'recreation_activity': ((value['recreation_activity'] as Array<any>).map(RecreationActivityDtoToJSON)),
        'recreation_status': RecreationStatusDtoToJSON(value['recreation_status']),
        'rec_resource_type': value['rec_resource_type'],
        'recreation_resource_images': value['recreation_resource_images'] == null ? undefined : ((value['recreation_resource_images'] as Array<any>).map(RecreationResourceImageDtoToJSON)),
    };
}

