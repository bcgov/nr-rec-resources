/* tslint:disable */
/* eslint-disable */
/**
 * Recreation Sites and Trails BC API
 * RST API documentation
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { FilterOptionDto } from './FilterOptionDto';
import {
  FilterOptionDtoFromJSON,
  FilterOptionDtoFromJSONTyped,
  FilterOptionDtoToJSON,
  FilterOptionDtoToJSONTyped,
} from './FilterOptionDto';

/**
 *
 * @export
 * @interface FilterDto
 */
export interface FilterDto {
  /**
   *
   * @type {string}
   * @memberof FilterDto
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof FilterDto
   */
  label: string;
  /**
   *
   * @type {string}
   * @memberof FilterDto
   */
  param: string;
  /**
   *
   * @type {Array<FilterOptionDto>}
   * @memberof FilterDto
   */
  options: Array<FilterOptionDto>;
}

/**
 * Check if a given object implements the FilterDto interface.
 */
export function instanceOfFilterDto(value: object): value is FilterDto {
  if (!('type' in value) || value['type'] === undefined) return false;
  if (!('label' in value) || value['label'] === undefined) return false;
  if (!('param' in value) || value['param'] === undefined) return false;
  if (!('options' in value) || value['options'] === undefined) return false;
  return true;
}

export function FilterDtoFromJSON(json: any): FilterDto {
  return FilterDtoFromJSONTyped(json, false);
}

export function FilterDtoFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): FilterDto {
  if (json == null) {
    return json;
  }
  return {
    type: json['type'],
    label: json['label'],
    param: json['param'],
    options: (json['options'] as Array<any>).map(FilterOptionDtoFromJSON),
  };
}

export function FilterDtoToJSON(json: any): FilterDto {
  return FilterDtoToJSONTyped(json, false);
}

export function FilterDtoToJSONTyped(
  value?: FilterDto | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    type: value['type'],
    label: value['label'],
    param: value['param'],
    options: (value['options'] as Array<any>).map(FilterOptionDtoToJSON),
  };
}
